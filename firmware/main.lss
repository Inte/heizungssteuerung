
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001d56  00001dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00800082  00800082  00001e0c  2**0
                  ALLOC
  3 .stab         00004b90  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110e  00000000  00000000  0000699c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00007aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000313  00000000  00000000  00007b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011bd  00000000  00000000  00007e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000764  00000000  00000000  0000903a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000de2  00000000  00000000  0000979e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  0000a580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000481  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ca6  00000000  00000000  0000acb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  0000b957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_13>
      38:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__c.1805>:
      54:	6e 61 6e 00                                         nan.

00000058 <__c.1803>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e6 e5       	ldi	r30, 0x56	; 86
     16a:	fd e1       	ldi	r31, 0x1D	; 29
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a2 38       	cpi	r26, 0x82	; 130
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	a2 e8       	ldi	r26, 0x82	; 130
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ad 3c       	cpi	r26, 0xCD	; 205
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 04 02 	call	0x408	; 0x408 <main>
     18c:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <uart_put_hex_helper>:
char uart_put_hex_helper(const char c) {
	switch (c) {
     194:	87 30       	cpi	r24, 0x07	; 7
     196:	71 f1       	breq	.+92     	; 0x1f4 <uart_put_hex_helper+0x60>
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	70 f4       	brcc	.+28     	; 0x1b8 <uart_put_hex_helper+0x24>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	11 f1       	breq	.+68     	; 0x1e4 <uart_put_hex_helper+0x50>
     1a0:	84 30       	cpi	r24, 0x04	; 4
     1a2:	28 f4       	brcc	.+10     	; 0x1ae <uart_put_hex_helper+0x1a>
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	c1 f0       	breq	.+48     	; 0x1d8 <uart_put_hex_helper+0x44>
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	d0 f4       	brcc	.+52     	; 0x1e0 <uart_put_hex_helper+0x4c>
     1ac:	17 c0       	rjmp	.+46     	; 0x1dc <uart_put_hex_helper+0x48>
     1ae:	85 30       	cpi	r24, 0x05	; 5
     1b0:	e9 f0       	breq	.+58     	; 0x1ec <uart_put_hex_helper+0x58>
     1b2:	86 30       	cpi	r24, 0x06	; 6
     1b4:	e8 f4       	brcc	.+58     	; 0x1f0 <uart_put_hex_helper+0x5c>
     1b6:	18 c0       	rjmp	.+48     	; 0x1e8 <uart_put_hex_helper+0x54>
     1b8:	8b 30       	cpi	r24, 0x0B	; 11
     1ba:	21 f1       	breq	.+72     	; 0x204 <uart_put_hex_helper+0x70>
     1bc:	8c 30       	cpi	r24, 0x0C	; 12
     1be:	28 f4       	brcc	.+10     	; 0x1ca <uart_put_hex_helper+0x36>
     1c0:	89 30       	cpi	r24, 0x09	; 9
     1c2:	e1 f0       	breq	.+56     	; 0x1fc <uart_put_hex_helper+0x68>
     1c4:	8a 30       	cpi	r24, 0x0A	; 10
     1c6:	e0 f4       	brcc	.+56     	; 0x200 <uart_put_hex_helper+0x6c>
     1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <uart_put_hex_helper+0x64>
     1ca:	8d 30       	cpi	r24, 0x0D	; 13
     1cc:	f9 f0       	breq	.+62     	; 0x20c <uart_put_hex_helper+0x78>
     1ce:	8d 30       	cpi	r24, 0x0D	; 13
     1d0:	d8 f0       	brcs	.+54     	; 0x208 <uart_put_hex_helper+0x74>
     1d2:	8e 30       	cpi	r24, 0x0E	; 14
     1d4:	f9 f4       	brne	.+62     	; 0x214 <uart_put_hex_helper+0x80>
     1d6:	1c c0       	rjmp	.+56     	; 0x210 <uart_put_hex_helper+0x7c>
     1d8:	81 e3       	ldi	r24, 0x31	; 49
     1da:	08 95       	ret
     1dc:	80 e3       	ldi	r24, 0x30	; 48
     1de:	08 95       	ret
     1e0:	82 e3       	ldi	r24, 0x32	; 50
     1e2:	08 95       	ret
		case 0: return '0';
		case 1: return '1';
		case 2: return '2';
     1e4:	83 e3       	ldi	r24, 0x33	; 51
     1e6:	08 95       	ret
		case 3: return '3';
     1e8:	84 e3       	ldi	r24, 0x34	; 52
     1ea:	08 95       	ret
		case 4: return '4';
     1ec:	85 e3       	ldi	r24, 0x35	; 53
     1ee:	08 95       	ret
		case 5: return '5';
     1f0:	86 e3       	ldi	r24, 0x36	; 54
     1f2:	08 95       	ret
		case 6: return '6';
     1f4:	87 e3       	ldi	r24, 0x37	; 55
     1f6:	08 95       	ret
		case 7: return '7';
     1f8:	88 e3       	ldi	r24, 0x38	; 56
     1fa:	08 95       	ret
		case 8: return '8';
     1fc:	89 e3       	ldi	r24, 0x39	; 57
     1fe:	08 95       	ret
		case 9: return '9';
     200:	81 e6       	ldi	r24, 0x61	; 97
     202:	08 95       	ret
		case 10: return 'a';
     204:	82 e6       	ldi	r24, 0x62	; 98
     206:	08 95       	ret
		case 11: return 'b';
     208:	83 e6       	ldi	r24, 0x63	; 99
     20a:	08 95       	ret
		case 12: return 'c';
     20c:	84 e6       	ldi	r24, 0x64	; 100
     20e:	08 95       	ret
		case 13: return 'd';
     210:	85 e6       	ldi	r24, 0x65	; 101
     212:	08 95       	ret
		case 14: return 'e';
     214:	86 e6       	ldi	r24, 0x66	; 102
	}
	return 'f';
}
     216:	08 95       	ret

00000218 <search_and_start_measurement>:
        s++;
    }
}

uint8_t search_and_start_measurement(uint8_t diff)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	29 97       	sbiw	r28, 0x09	; 9
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	89 87       	std	Y+9, r24	; 0x09
	uint8_t sensor_id[OW_ROMCODE_SIZE];
#ifndef OW_ONE_BUS
	ow_set_bus(&PINB,&PORTB,&DDRB,PB0);
     232:	86 e3       	ldi	r24, 0x36	; 54
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	68 e3       	ldi	r22, 0x38	; 56
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	47 e3       	ldi	r20, 0x37	; 55
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	0e 94 af 04 	call	0x95e	; 0x95e <ow_set_bus>
#endif
	ow_reset();
     244:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
	DS18X20_find_sensor( &diff, &sensor_id[0] );
     248:	ce 01       	movw	r24, r28
     24a:	09 96       	adiw	r24, 0x09	; 9
     24c:	8e 01       	movw	r16, r28
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	b8 01       	movw	r22, r16
     254:	0e 94 af 06 	call	0xd5e	; 0xd5e <DS18X20_find_sensor>

	if( diff == OW_PRESENCE_ERR || diff == OW_DATA_ERR ) {
     258:	99 85       	ldd	r25, Y+9	; 0x09
     25a:	89 2f       	mov	r24, r25
     25c:	8e 5f       	subi	r24, 0xFE	; 254
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	28 f0       	brcs	.+10     	; 0x26c <search_and_start_measurement+0x54>
		return diff;
	}
	DS18X20_start_meas(DS18X20_POWER_EXTERN, &sensor_id[0]);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	b8 01       	movw	r22, r16
     266:	0e 94 92 06 	call	0xd24	; 0xd24 <DS18X20_start_meas>
	return diff;
     26a:	99 85       	ldd	r25, Y+9	; 0x09
}
     26c:	89 2f       	mov	r24, r25
     26e:	29 96       	adiw	r28, 0x09	; 9
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <usart0_puts>:
#define BAUD 9600                    //definiert die Bautrate für den USART.
#define USART0_RX_BUFFER_SIZE 32      //definiert die größe des Empfangsbuffers. Die Buffergröße kann 2, 4, 8, 16, 32, 64, 128 oder 256 Byte groß sein.
#define USART0_TX_BUFFER_SIZE 32      //definiert die größe des Sendebuffers. Die Buffergröße kann 2, 4, 8, 16, 32, 64, 128 oder 256 Byte groß sein.

void usart0_puts (const char *s)
{
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
     28a:	03 c0       	rjmp	.+6      	; 0x292 <usart0_puts+0xe>
    while (*s)
    {
        usart0_putc(*s);
     28c:	0e 94 9c 02 	call	0x538	; 0x538 <usart0_putc>
        s++;
     290:	21 96       	adiw	r28, 0x01	; 1
#define USART0_RX_BUFFER_SIZE 32      //definiert die größe des Empfangsbuffers. Die Buffergröße kann 2, 4, 8, 16, 32, 64, 128 oder 256 Byte groß sein.
#define USART0_TX_BUFFER_SIZE 32      //definiert die größe des Sendebuffers. Die Buffergröße kann 2, 4, 8, 16, 32, 64, 128 oder 256 Byte groß sein.

void usart0_puts (const char *s)
{
    while (*s)
     292:	88 81       	ld	r24, Y
     294:	88 23       	and	r24, r24
     296:	d1 f7       	brne	.-12     	; 0x28c <usart0_puts+0x8>
    {
        usart0_putc(*s);
        s++;
    }
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <uart_put_hexc>:

void uart_put_hexc(const char c) {
     29e:	1f 93       	push	r17
     2a0:	18 2f       	mov	r17, r24
	usart0_putc(uart_put_hex_helper((c & 0xf0) >> 4));
     2a2:	82 95       	swap	r24
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	0e 94 ca 00 	call	0x194	; 0x194 <uart_put_hex_helper>
     2aa:	0e 94 9c 02 	call	0x538	; 0x538 <usart0_putc>
	usart0_putc(uart_put_hex_helper(c & 0x0f));
     2ae:	81 2f       	mov	r24, r17
     2b0:	8f 70       	andi	r24, 0x0F	; 15
     2b2:	0e 94 ca 00 	call	0x194	; 0x194 <uart_put_hex_helper>
     2b6:	0e 94 9c 02 	call	0x538	; 0x538 <usart0_putc>
}
     2ba:	1f 91       	pop	r17
     2bc:	08 95       	ret

000002be <uart_put_hex>:

void uart_put_hex(const char buf[], const int length) {
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	7c 01       	movw	r14, r24
     2cc:	8b 01       	movw	r16, r22
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <uart_put_hex+0x24>
	for (int i = 0; i < length; i++) {
		uart_put_hexc(buf[i]);
     2d4:	f7 01       	movw	r30, r14
     2d6:	ec 0f       	add	r30, r28
     2d8:	fd 1f       	adc	r31, r29
     2da:	80 81       	ld	r24, Z
     2dc:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_put_hexc>
	usart0_putc(uart_put_hex_helper((c & 0xf0) >> 4));
	usart0_putc(uart_put_hex_helper(c & 0x0f));
}

void uart_put_hex(const char buf[], const int length) {
	for (int i = 0; i < length; i++) {
     2e0:	21 96       	adiw	r28, 0x01	; 1
     2e2:	c0 17       	cp	r28, r16
     2e4:	d1 07       	cpc	r29, r17
     2e6:	b4 f3       	brlt	.-20     	; 0x2d4 <uart_put_hex+0x16>
		uart_put_hexc(buf[i]);
	}
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	08 95       	ret

000002f6 <search_and_display>:
	DS18X20_start_meas(DS18X20_POWER_EXTERN, &sensor_id[0]);
	return diff;
}

uint8_t search_and_display(uint8_t diff)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	6f 97       	sbiw	r28, 0x1f	; 31
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8_t sensor_id[OW_ROMCODE_SIZE];
	int16_t decicelsius;
	uint8_t puffer[20];
	double output;
#ifndef OW_ONE_BUS
	ow_set_bus(&PINB,&PORTB,&DDRB,PB0);
     318:	86 e3       	ldi	r24, 0x36	; 54
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	68 e3       	ldi	r22, 0x38	; 56
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	47 e3       	ldi	r20, 0x37	; 55
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	0e 94 af 04 	call	0x95e	; 0x95e <ow_set_bus>
#endif
	ow_reset();
     32a:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
	DS18X20_find_sensor( &diff, &sensor_id[0] );
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	c9 2e       	mov	r12, r25
     332:	d1 2c       	mov	r13, r1
     334:	cc 0e       	add	r12, r28
     336:	dd 1e       	adc	r13, r29
     338:	ce 01       	movw	r24, r28
     33a:	4f 96       	adiw	r24, 0x1f	; 31
     33c:	b6 01       	movw	r22, r12
     33e:	0e 94 af 06 	call	0xd5e	; 0xd5e <DS18X20_find_sensor>
    
	if( diff == OW_PRESENCE_ERR || diff == OW_DATA_ERR ) {
     342:	9f 8d       	ldd	r25, Y+31	; 0x1f
     344:	89 2f       	mov	r24, r25
     346:	8e 5f       	subi	r24, 0xFE	; 254
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	08 f4       	brcc	.+2      	; 0x34e <search_and_display+0x58>
     34c:	4d c0       	rjmp	.+154    	; 0x3e8 <search_and_display+0xf2>
		return diff;
	}
	if (DS18X20_read_decicelsius( &sensor_id[0], &decicelsius) == DS18X20_OK) {
     34e:	c6 01       	movw	r24, r12
     350:	be 01       	movw	r22, r28
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DS18X20_read_decicelsius>
     35a:	88 23       	and	r24, r24
     35c:	09 f0       	breq	.+2      	; 0x360 <search_and_display+0x6a>
     35e:	43 c0       	rjmp	.+134    	; 0x3e6 <search_and_display+0xf0>
		output = decicelsius / 10.0;
		sprintf( puffer, " %.2f ", output );
     360:	8d b7       	in	r24, 0x3d	; 61
     362:	9e b7       	in	r25, 0x3e	; 62
     364:	08 97       	sbiw	r24, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	9e bf       	out	0x3e, r25	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	8d bf       	out	0x3d, r24	; 61
     370:	0d b7       	in	r16, 0x3d	; 61
     372:	1e b7       	in	r17, 0x3e	; 62
     374:	0f 5f       	subi	r16, 0xFF	; 255
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	8b e0       	ldi	r24, 0x0B	; 11
     37a:	e8 2e       	mov	r14, r24
     37c:	f1 2c       	mov	r15, r1
     37e:	ec 0e       	add	r14, r28
     380:	fd 1e       	adc	r15, r29
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	f2 82       	std	Z+2, r15	; 0x02
     388:	e1 82       	std	Z+1, r14	; 0x01
     38a:	80 e6       	ldi	r24, 0x60	; 96
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	f8 01       	movw	r30, r16
     390:	93 83       	std	Z+3, r25	; 0x03
     392:	82 83       	std	Z+2, r24	; 0x02
     394:	69 81       	ldd	r22, Y+1	; 0x01
     396:	7a 81       	ldd	r23, Y+2	; 0x02
     398:	88 27       	eor	r24, r24
     39a:	77 fd       	sbrc	r23, 7
     39c:	80 95       	com	r24
     39e:	98 2f       	mov	r25, r24
     3a0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__floatsisf>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e2       	ldi	r20, 0x20	; 32
     3aa:	51 e4       	ldi	r21, 0x41	; 65
     3ac:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
     3b0:	f8 01       	movw	r30, r16
     3b2:	64 83       	std	Z+4, r22	; 0x04
     3b4:	75 83       	std	Z+5, r23	; 0x05
     3b6:	86 83       	std	Z+6, r24	; 0x06
     3b8:	97 83       	std	Z+7, r25	; 0x07
     3ba:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <sprintf>
		uart_put_hex(sensor_id, OW_ROMCODE_SIZE);
     3be:	8d b7       	in	r24, 0x3d	; 61
     3c0:	9e b7       	in	r25, 0x3e	; 62
     3c2:	08 96       	adiw	r24, 0x08	; 8
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	9e bf       	out	0x3e, r25	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	8d bf       	out	0x3d, r24	; 61
     3ce:	c6 01       	movw	r24, r12
     3d0:	68 e0       	ldi	r22, 0x08	; 8
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	0e 94 5f 01 	call	0x2be	; 0x2be <uart_put_hex>
		usart0_puts( puffer );
     3d8:	c7 01       	movw	r24, r14
     3da:	0e 94 42 01 	call	0x284	; 0x284 <usart0_puts>
		usart0_puts("\r\n");
     3de:	87 e6       	ldi	r24, 0x67	; 103
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 42 01 	call	0x284	; 0x284 <usart0_puts>
	}
		
	return diff;
     3e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
}
     3e8:	89 2f       	mov	r24, r25
     3ea:	6f 96       	adiw	r28, 0x1f	; 31
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	df 90       	pop	r13
     404:	cf 90       	pop	r12
     406:	08 95       	ret

00000408 <main>:


int main(void) {
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
	
    usart0_init();
     410:	0e 94 38 02 	call	0x470	; 0x470 <usart0_init>
		
	/* enable LED so that the user knows the controller is active */
    DDRC = (1 << PC7);
     414:	80 e8       	ldi	r24, 0x80	; 128
     416:	84 bb       	out	0x14, r24	; 20
    PORTC = (1 << PC7);
     418:	85 bb       	out	0x15, r24	; 21

	sei();
     41a:	78 94       	sei
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     422:	0c e2       	ldi	r16, 0x2C	; 44
     424:	11 e0       	ldi	r17, 0x01	; 1
     426:	05 c0       	rjmp	.+10     	; 0x432 <main+0x2a>

	while (1) {
		uint8_t diff = OW_SEARCH_FIRST;
		for (uint16_t i = 0; i < 64000; ++i) {
			diff = search_and_start_measurement(diff);
     428:	0e 94 0c 01 	call	0x218	; 0x218 <search_and_start_measurement>
			if (diff == OW_LAST_DEVICE) {
     42c:	88 23       	and	r24, r24
     42e:	29 f0       	breq	.+10     	; 0x43a <main+0x32>

	sei();

	while (1) {
		uint8_t diff = OW_SEARCH_FIRST;
		for (uint16_t i = 0; i < 64000; ++i) {
     430:	21 96       	adiw	r28, 0x01	; 1
     432:	9a ef       	ldi	r25, 0xFA	; 250
     434:	c0 30       	cpi	r28, 0x00	; 0
     436:	d9 07       	cpc	r29, r25
     438:	b8 f3       	brcs	.-18     	; 0x428 <main+0x20>
     43a:	8c e4       	ldi	r24, 0x4C	; 76
     43c:	9d e1       	ldi	r25, 0x1D	; 29
     43e:	f8 01       	movw	r30, r16
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     444:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	d9 f7       	brne	.-10     	; 0x43e <main+0x36>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	c0 e0       	ldi	r28, 0x00	; 0
     44c:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		_delay_ms( DS18B20_TCONV_12BIT );
		diff = OW_SEARCH_FIRST;
		for (uint16_t i = 0; i < 64000; ++i) {
			diff = search_and_display(diff);
     44e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <search_and_display>
			if (diff == OW_LAST_DEVICE) {
     452:	88 23       	and	r24, r24
     454:	29 f0       	breq	.+10     	; 0x460 <main+0x58>
				break;
			}
		}
		_delay_ms( DS18B20_TCONV_12BIT );
		diff = OW_SEARCH_FIRST;
		for (uint16_t i = 0; i < 64000; ++i) {
     456:	21 96       	adiw	r28, 0x01	; 1
     458:	9a ef       	ldi	r25, 0xFA	; 250
     45a:	c0 30       	cpi	r28, 0x00	; 0
     45c:	d9 07       	cpc	r29, r25
     45e:	b9 f7       	brne	.-18     	; 0x44e <main+0x46>
			diff = search_and_display(diff);
			if (diff == OW_LAST_DEVICE) {
				break;
			}
		}
		usart0_puts("\r\n");
     460:	87 e6       	ldi	r24, 0x67	; 103
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 42 01 	call	0x284	; 0x284 <usart0_puts>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	e1 cf       	rjmp	.-62     	; 0x432 <main+0x2a>

00000470 <usart0_init>:
static volatile char USART0_TxTail;

/* Initialize USART */
void usart0_init( void )
{
    UBRR0L = UBRRL_VALUE;
     470:	8d e4       	ldi	r24, 0x4D	; 77
     472:	89 b9       	out	0x09, r24	; 9
    UBRR0H = UBRRH_VALUE;
     474:	10 bc       	out	0x20, r1	; 32
    UCSR0B = ( ( 1 << RXCIE0 ) | ( 1 << RXEN0 ) | ( 1 << TXEN0 ) );
     476:	88 e9       	ldi	r24, 0x98	; 152
     478:	8a b9       	out	0x0a, r24	; 10
    #ifdef URSEL
        UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     47a:	86 e8       	ldi	r24, 0x86	; 134
     47c:	80 bd       	out	0x20, r24	; 32
        UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    #endif
#if USE_2X
    UCSR0A |= (1 << U2X0);
#endif /*USE_2X*/
    USART0_RxTail = 0;
     47e:	10 92 a3 00 	sts	0x00A3, r1
    USART0_RxHead = 0;
     482:	10 92 a2 00 	sts	0x00A2, r1
    USART0_TxTail = 0;
     486:	10 92 c5 00 	sts	0x00C5, r1
    USART0_TxHead = 0;
     48a:	10 92 c4 00 	sts	0x00C4, r1
}
     48e:	08 95       	ret

00000490 <__vector_13>:


ISR(UART0_RECV_IRQ)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
    char data;
    unsigned char tmp;
    data = UDR0;
     4a2:	9c b1       	in	r25, 0x0c	; 12
    tmp = ( USART0_RxHead + 1 ) & USART0_RX_BUFFER_MASK;
     4a4:	80 91 a2 00 	lds	r24, 0x00A2
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	8f 71       	andi	r24, 0x1F	; 31
    USART0_RxHead = tmp;
     4ac:	80 93 a2 00 	sts	0x00A2, r24
    USART0_RxBuf[tmp] = data;
     4b0:	e2 e8       	ldi	r30, 0x82	; 130
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	e8 0f       	add	r30, r24
     4b6:	f1 1d       	adc	r31, r1
     4b8:	90 83       	st	Z, r25
}
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_14>:

ISR(UART0_DATA_IRQ)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
    unsigned char tmp;

    if ( USART0_TxHead != USART0_TxTail )
     4de:	90 91 c4 00 	lds	r25, 0x00C4
     4e2:	80 91 c5 00 	lds	r24, 0x00C5
     4e6:	98 17       	cp	r25, r24
     4e8:	61 f0       	breq	.+24     	; 0x502 <__vector_14+0x36>
    {
        tmp = ( USART0_TxTail + 1 ) & USART0_TX_BUFFER_MASK;
     4ea:	e0 91 c5 00 	lds	r30, 0x00C5
     4ee:	ef 5f       	subi	r30, 0xFF	; 255
     4f0:	ef 71       	andi	r30, 0x1F	; 31
        USART0_TxTail = tmp;
     4f2:	e0 93 c5 00 	sts	0x00C5, r30
        UDR0 = USART0_TxBuf[tmp];
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 55       	subi	r30, 0x5C	; 92
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	80 81       	ld	r24, Z
     4fe:	8c b9       	out	0x0c, r24	; 12
     500:	01 c0       	rjmp	.+2      	; 0x504 <__vector_14+0x38>
    }
    else
    {
        UCSR0B &= ~(1<<UDRIE0);
     502:	55 98       	cbi	0x0a, 5	; 10
    }
}
     504:	ff 91       	pop	r31
     506:	ef 91       	pop	r30
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart0_getc>:

char usart0_getc( void )
{
    unsigned char tmp;

    while ( USART0_RxHead == USART0_RxTail );
     516:	90 91 a2 00 	lds	r25, 0x00A2
     51a:	80 91 a3 00 	lds	r24, 0x00A3
     51e:	98 17       	cp	r25, r24
     520:	d1 f3       	breq	.-12     	; 0x516 <usart0_getc>
    tmp = ( USART0_RxTail + 1 ) & USART0_RX_BUFFER_MASK;
     522:	e0 91 a3 00 	lds	r30, 0x00A3
     526:	ef 5f       	subi	r30, 0xFF	; 255
     528:	ef 71       	andi	r30, 0x1F	; 31
    USART0_RxTail = tmp;
     52a:	e0 93 a3 00 	sts	0x00A3, r30
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	ee 57       	subi	r30, 0x7E	; 126
     532:	ff 4f       	sbci	r31, 0xFF	; 255
    return USART0_RxBuf[tmp];
}
     534:	80 81       	ld	r24, Z
     536:	08 95       	ret

00000538 <usart0_putc>:

void usart0_putc( char data )
{
     538:	28 2f       	mov	r18, r24
    unsigned char tmp;
    tmp = ( USART0_TxHead + 1 ) & USART0_TX_BUFFER_MASK;
     53a:	90 91 c4 00 	lds	r25, 0x00C4
     53e:	9f 5f       	subi	r25, 0xFF	; 255
     540:	9f 71       	andi	r25, 0x1F	; 31
    while ( tmp == USART0_TxTail );
     542:	80 91 c5 00 	lds	r24, 0x00C5
     546:	98 17       	cp	r25, r24
     548:	e1 f3       	breq	.-8      	; 0x542 <usart0_putc+0xa>
    USART0_TxBuf[tmp] = data;
     54a:	e9 2f       	mov	r30, r25
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	ec 55       	subi	r30, 0x5C	; 92
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	20 83       	st	Z, r18
    USART0_TxHead = tmp;
     554:	90 93 c4 00 	sts	0x00C4, r25
    UCSR0B |= (1<<UDRIE0);
     558:	55 9a       	sbi	0x0a, 5	; 10
}
     55a:	08 95       	ret

0000055c <usart0_data_received>:

char usart0_data_received( void )
{
    return ( USART0_RxHead != USART0_RxTail );
     55c:	90 91 a2 00 	lds	r25, 0x00A2
     560:	80 91 a3 00 	lds	r24, 0x00A3
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	98 13       	cpse	r25, r24
     568:	21 e0       	ldi	r18, 0x01	; 1
}
     56a:	82 2f       	mov	r24, r18
     56c:	08 95       	ret

0000056e <ctob>:

/*
** convert char to binary string
*/
void ctob(char * buf, unsigned char val)
{
     56e:	fc 01       	movw	r30, r24
	signed char i;

	buf+=8;
	*buf-- = 0;
     570:	10 86       	std	Z+8, r1	; 0x08
	
    for (i=7; i>=0; i--) {
     572:	9c 01       	movw	r18, r24
     574:	28 50       	subi	r18, 0x08	; 8
     576:	30 40       	sbci	r19, 0x00	; 0
        *buf-- = val%2 + '0';
     578:	86 2f       	mov	r24, r22
     57a:	81 70       	andi	r24, 0x01	; 1
     57c:	80 5d       	subi	r24, 0xD0	; 208
     57e:	87 83       	std	Z+7, r24	; 0x07
        val >>= 1;
     580:	66 95       	lsr	r22
     582:	31 97       	sbiw	r30, 0x01	; 1
	signed char i;

	buf+=8;
	*buf-- = 0;
	
    for (i=7; i>=0; i--) {
     584:	e2 17       	cp	r30, r18
     586:	f3 07       	cpc	r31, r19
     588:	b9 f7       	brne	.-18     	; 0x578 <ctob+0xa>
        *buf-- = val%2 + '0';
        val >>= 1;
    }
}
     58a:	08 95       	ret

0000058c <itob>:

/*
** convert int to binary string
*/
void itob(char * buf, unsigned int val)
{
     58c:	fc 01       	movw	r30, r24
	signed char i;

	buf+=16;
	*buf-- = 0;
     58e:	10 8a       	std	Z+16, r1	; 0x10
	
    for (i=15; i>=0; i--) {
     590:	9c 01       	movw	r18, r24
     592:	20 51       	subi	r18, 0x10	; 16
     594:	30 40       	sbci	r19, 0x00	; 0
        *buf-- = val%2 + '0';
     596:	86 2f       	mov	r24, r22
     598:	81 70       	andi	r24, 0x01	; 1
     59a:	80 5d       	subi	r24, 0xD0	; 208
     59c:	87 87       	std	Z+15, r24	; 0x0f
        val >>= 1;
     59e:	76 95       	lsr	r23
     5a0:	67 95       	ror	r22
     5a2:	31 97       	sbiw	r30, 0x01	; 1
	signed char i;

	buf+=16;
	*buf-- = 0;
	
    for (i=15; i>=0; i--) {
     5a4:	e2 17       	cp	r30, r18
     5a6:	f3 07       	cpc	r31, r19
     5a8:	b1 f7       	brne	.-20     	; 0x596 <itob+0xa>
        *buf-- = val%2 + '0';
        val >>= 1;
    }
}
     5aa:	08 95       	ret

000005ac <ctoh>:

/*
** convert char to hex string
*/
void ctoh(char * buf, unsigned char val)
{
     5ac:	dc 01       	movw	r26, r24
	buf+=2;
     5ae:	fc 01       	movw	r30, r24
     5b0:	32 96       	adiw	r30, 0x02	; 2
	*buf-- = 0;
     5b2:	12 96       	adiw	r26, 0x02	; 2
     5b4:	1c 92       	st	X, r1
     5b6:	12 97       	sbiw	r26, 0x02	; 2

	*buf-- = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     5b8:	86 2f       	mov	r24, r22
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	8f 70       	andi	r24, 0x0F	; 15
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	36 2f       	mov	r19, r22
     5c2:	3f 70       	andi	r19, 0x0F	; 15
     5c4:	0a 97       	sbiw	r24, 0x0a	; 10
     5c6:	1c f4       	brge	.+6      	; 0x5ce <ctoh+0x22>
     5c8:	83 2f       	mov	r24, r19
     5ca:	80 5d       	subi	r24, 0xD0	; 208
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <ctoh+0x26>
     5ce:	83 2f       	mov	r24, r19
     5d0:	89 5a       	subi	r24, 0xA9	; 169
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	80 83       	st	Z, r24
	val >>= 4;
     5d6:	26 2f       	mov	r18, r22
     5d8:	22 95       	swap	r18
     5da:	2f 70       	andi	r18, 0x0F	; 15
	*buf = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     5dc:	82 2f       	mov	r24, r18
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2f 70       	andi	r18, 0x0F	; 15
     5e2:	0a 97       	sbiw	r24, 0x0a	; 10
     5e4:	14 f4       	brge	.+4      	; 0x5ea <ctoh+0x3e>
     5e6:	20 5d       	subi	r18, 0xD0	; 208
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <ctoh+0x40>
     5ea:	29 5a       	subi	r18, 0xA9	; 169
     5ec:	2c 93       	st	X, r18
}
     5ee:	08 95       	ret

000005f0 <itoh>:

/*
** convert int to hex string
*/
void itoh(char * buf, unsigned int val)
{
     5f0:	dc 01       	movw	r26, r24
	char i;

	buf+=4;
	*buf-- = 0;
     5f2:	14 96       	adiw	r26, 0x04	; 4
     5f4:	1c 92       	st	X, r1
     5f6:	14 97       	sbiw	r26, 0x04	; 4
     5f8:	fc 01       	movw	r30, r24
     5fa:	33 96       	adiw	r30, 0x03	; 3

	for (i=0;i<4;i++) {
		*buf-- = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     5fc:	cb 01       	movw	r24, r22
     5fe:	8f 70       	andi	r24, 0x0F	; 15
     600:	90 70       	andi	r25, 0x00	; 0
     602:	26 2f       	mov	r18, r22
     604:	2f 70       	andi	r18, 0x0F	; 15
     606:	0a 97       	sbiw	r24, 0x0a	; 10
     608:	18 f4       	brcc	.+6      	; 0x610 <itoh+0x20>
     60a:	82 2f       	mov	r24, r18
     60c:	80 5d       	subi	r24, 0xD0	; 208
     60e:	02 c0       	rjmp	.+4      	; 0x614 <itoh+0x24>
     610:	82 2f       	mov	r24, r18
     612:	89 5a       	subi	r24, 0xA9	; 169
     614:	80 83       	st	Z, r24
	char i;

	buf+=4;
	*buf-- = 0;

	for (i=0;i<4;i++) {
     616:	ea 17       	cp	r30, r26
     618:	fb 07       	cpc	r31, r27
     61a:	39 f0       	breq	.+14     	; 0x62a <itoh+0x3a>
		*buf-- = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     61c:	31 97       	sbiw	r30, 0x01	; 1
		val >>= 4;
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	76 95       	lsr	r23
     622:	67 95       	ror	r22
     624:	9a 95       	dec	r25
     626:	e1 f7       	brne	.-8      	; 0x620 <itoh+0x30>
     628:	e9 cf       	rjmp	.-46     	; 0x5fc <itoh+0xc>
     62a:	08 95       	ret

0000062c <ltoh>:

/*
** convert long to hex string
*/
void ltoh(char * buf, unsigned long val)
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
	char i;

	buf+=8;
	*buf-- = 0;
     632:	18 86       	std	Y+8, r1	; 0x08
     634:	fc 01       	movw	r30, r24
     636:	37 96       	adiw	r30, 0x07	; 7

	for (i=0;i<8;i++) {
		*buf-- = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     638:	db 01       	movw	r26, r22
     63a:	ca 01       	movw	r24, r20
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	90 70       	andi	r25, 0x00	; 0
     640:	a0 70       	andi	r26, 0x00	; 0
     642:	b0 70       	andi	r27, 0x00	; 0
     644:	24 2f       	mov	r18, r20
     646:	2f 70       	andi	r18, 0x0F	; 15
     648:	0a 97       	sbiw	r24, 0x0a	; 10
     64a:	a1 05       	cpc	r26, r1
     64c:	b1 05       	cpc	r27, r1
     64e:	18 f4       	brcc	.+6      	; 0x656 <ltoh+0x2a>
     650:	82 2f       	mov	r24, r18
     652:	80 5d       	subi	r24, 0xD0	; 208
     654:	02 c0       	rjmp	.+4      	; 0x65a <ltoh+0x2e>
     656:	82 2f       	mov	r24, r18
     658:	89 5a       	subi	r24, 0xA9	; 169
     65a:	80 83       	st	Z, r24
	char i;

	buf+=8;
	*buf-- = 0;

	for (i=0;i<8;i++) {
     65c:	ec 17       	cp	r30, r28
     65e:	fd 07       	cpc	r31, r29
     660:	49 f0       	breq	.+18     	; 0x674 <ltoh+0x48>
		*buf-- = val%16 < 10 ? val%16 + '0' : val%16 + 'a'-10;
     662:	31 97       	sbiw	r30, 0x01	; 1
		val >>= 4;
     664:	24 e0       	ldi	r18, 0x04	; 4
     666:	76 95       	lsr	r23
     668:	67 95       	ror	r22
     66a:	57 95       	ror	r21
     66c:	47 95       	ror	r20
     66e:	2a 95       	dec	r18
     670:	d1 f7       	brne	.-12     	; 0x666 <ltoh+0x3a>
     672:	e2 cf       	rjmp	.-60     	; 0x638 <ltoh+0xc>
	}
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <ftoa>:
}*/

#else

void ftoa(char * buf, double f, char d, char pad, char padchar)
{
     67a:	4f 92       	push	r4
     67c:	5f 92       	push	r5
     67e:	6f 92       	push	r6
     680:	7f 92       	push	r7
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	68 97       	sbiw	r28, 0x18	; 24
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	4c 01       	movw	r8, r24
     6ac:	5a 01       	movw	r10, r20
     6ae:	6b 01       	movw	r12, r22
     6b0:	42 2e       	mov	r4, r18
     6b2:	60 2e       	mov	r6, r16
     6b4:	5e 2c       	mov	r5, r14
	char * p;
	const double powers[] = {1.0,10.0,100.0,1000.0,10000.0,100000.0};
     6b6:	de 01       	movw	r26, r28
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	ea e6       	ldi	r30, 0x6A	; 106
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <ftoa+0x46>

	/* round */
	f = f>=0.0 ? (f*powers[d]+0.5)/powers[d] : (f*powers[d]-0.5)/powers[d];
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	0e 94 09 0c 	call	0x1812	; 0x1812 <__gesf2>
     6d8:	fe 01       	movw	r30, r28
     6da:	31 96       	adiw	r30, 0x01	; 1
     6dc:	24 2d       	mov	r18, r4
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	88 23       	and	r24, r24
     6e2:	bc f0       	brlt	.+46     	; 0x712 <ftoa+0x98>
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	e2 0f       	add	r30, r18
     6ee:	f3 1f       	adc	r31, r19
     6f0:	e0 80       	ld	r14, Z
     6f2:	f1 80       	ldd	r15, Z+1	; 0x01
     6f4:	02 81       	ldd	r16, Z+2	; 0x02
     6f6:	13 81       	ldd	r17, Z+3	; 0x03
     6f8:	c6 01       	movw	r24, r12
     6fa:	b5 01       	movw	r22, r10
     6fc:	a8 01       	movw	r20, r16
     6fe:	97 01       	movw	r18, r14
     700:	0e 94 0d 0c 	call	0x181a	; 0x181a <__mulsf3>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	5f e3       	ldi	r21, 0x3F	; 63
     70c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__addsf3>
     710:	16 c0       	rjmp	.+44     	; 0x73e <ftoa+0xc4>
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	e2 0f       	add	r30, r18
     71c:	f3 1f       	adc	r31, r19
     71e:	e0 80       	ld	r14, Z
     720:	f1 80       	ldd	r15, Z+1	; 0x01
     722:	02 81       	ldd	r16, Z+2	; 0x02
     724:	13 81       	ldd	r17, Z+3	; 0x03
     726:	c6 01       	movw	r24, r12
     728:	b5 01       	movw	r22, r10
     72a:	a8 01       	movw	r20, r16
     72c:	97 01       	movw	r18, r14
     72e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__mulsf3>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
     73e:	a8 01       	movw	r20, r16
     740:	97 01       	movw	r18, r14
     742:	0e 94 be 0a 	call	0x157c	; 0x157c <__divsf3>
     746:	6b 01       	movw	r12, r22
     748:	7c 01       	movw	r14, r24

	/* special case */
	if (f<0.0 && f > -1.0) {
     74a:	77 24       	eor	r7, r7
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     758:	88 23       	and	r24, r24
     75a:	f4 f4       	brge	.+60     	; 0x798 <ftoa+0x11e>
     75c:	77 24       	eor	r7, r7
     75e:	73 94       	inc	r7
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e8       	ldi	r20, 0x80	; 128
     76a:	5f eb       	ldi	r21, 0xBF	; 191
     76c:	0e 94 09 0c 	call	0x1812	; 0x1812 <__gesf2>
     770:	18 16       	cp	r1, r24
     772:	94 f4       	brge	.+36     	; 0x798 <ftoa+0x11e>
		p = ltoa(buf,-1,pad,padchar);
     774:	c4 01       	movw	r24, r8
     776:	6f ef       	ldi	r22, 0xFF	; 255
     778:	7f ef       	ldi	r23, 0xFF	; 255
     77a:	46 2d       	mov	r20, r6
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	25 2d       	mov	r18, r5
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ltoa>
     786:	5c 01       	movw	r10, r24
		*(p-1) = '0';
     788:	80 e3       	ldi	r24, 0x30	; 48
     78a:	f5 01       	movw	r30, r10
     78c:	82 93       	st	-Z, r24
     78e:	5f 01       	movw	r10, r30
     790:	08 94       	sec
     792:	a1 1c       	adc	r10, r1
     794:	b1 1c       	adc	r11, r1
     796:	0a c0       	rjmp	.+20     	; 0x7ac <ftoa+0x132>
	}
	else
		p = ltoa(buf,f,pad,padchar);
     798:	c4 01       	movw	r24, r8
     79a:	b7 01       	movw	r22, r14
     79c:	a6 01       	movw	r20, r12
     79e:	26 2d       	mov	r18, r6
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	05 2d       	mov	r16, r5
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ltoa>
     7aa:	5c 01       	movw	r10, r24

	*p++ = '.';
     7ac:	8e e2       	ldi	r24, 0x2E	; 46
     7ae:	f5 01       	movw	r30, r10
     7b0:	80 83       	st	Z, r24

	if (f<0.0)
     7b2:	77 20       	and	r7, r7
     7b4:	21 f0       	breq	.+8      	; 0x7be <ftoa+0x144>
		f = -f;
     7b6:	f7 fa       	bst	r15, 7
     7b8:	f0 94       	com	r15
     7ba:	f7 f8       	bld	r15, 7
     7bc:	f0 94       	com	r15
	
	f -= (long) f;
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	0e 94 26 0b 	call	0x164c	; 0x164c <__fixsfsi>
     7c6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__floatsisf>
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__subsf3>
	f *= powers[d];
     7d6:	04 2d       	mov	r16, r4
     7d8:	10 e0       	ldi	r17, 0x00	; 0
	ltoa(p,(long)f,d,0);
     7da:	08 94       	sec
     7dc:	a1 1c       	adc	r10, r1
     7de:	b1 1c       	adc	r11, r1
     7e0:	f8 01       	movw	r30, r16
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ec 0f       	add	r30, r28
     7ec:	fd 1f       	adc	r31, r29
     7ee:	21 81       	ldd	r18, Z+1	; 0x01
     7f0:	32 81       	ldd	r19, Z+2	; 0x02
     7f2:	43 81       	ldd	r20, Z+3	; 0x03
     7f4:	54 81       	ldd	r21, Z+4	; 0x04
     7f6:	0e 94 0d 0c 	call	0x181a	; 0x181a <__mulsf3>
     7fa:	0e 94 26 0b 	call	0x164c	; 0x164c <__fixsfsi>
     7fe:	ab 01       	movw	r20, r22
     800:	bc 01       	movw	r22, r24
     802:	c5 01       	movw	r24, r10
     804:	98 01       	movw	r18, r16
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ltoa>
}
     80e:	68 96       	adiw	r28, 0x18	; 24
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	7f 90       	pop	r7
     834:	6f 90       	pop	r6
     836:	5f 90       	pop	r5
     838:	4f 90       	pop	r4
     83a:	08 95       	ret

0000083c <crc8>:

#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data, uint16_t number_of_bytes_in_data )
{
     83c:	dc 01       	movw	r26, r24
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
     844:	98 e1       	ldi	r25, 0x18	; 24
     846:	15 c0       	rjmp	.+42     	; 0x872 <__stack+0x13>
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
     848:	fd 01       	movw	r30, r26
     84a:	e4 0f       	add	r30, r20
     84c:	f5 1f       	adc	r31, r21
     84e:	e0 81       	ld	r30, Z
     850:	38 e0       	ldi	r19, 0x08	; 8
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
     852:	8e 2f       	mov	r24, r30
     854:	82 27       	eor	r24, r18
	
			if ( feedback_bit == 0x01 ) {
     856:	f8 2f       	mov	r31, r24
     858:	f1 70       	andi	r31, 0x01	; 1
     85a:	80 fd       	sbrc	r24, 0
				crc = crc ^ CRC8POLY;
     85c:	29 27       	eor	r18, r25
			}
			crc = (crc >> 1) & 0x7F;
     85e:	26 95       	lsr	r18
			if ( feedback_bit == 0x01 ) {
     860:	f1 30       	cpi	r31, 0x01	; 1
     862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
				crc = crc | 0x80;
     864:	20 68       	ori	r18, 0x80	; 128
			}
		
			b = b >> 1;
			bit_counter--;
     866:	31 50       	subi	r19, 0x01	; 1
		
		} while (bit_counter > 0);
     868:	11 f0       	breq	.+4      	; 0x86e <__stack+0xf>
			crc = (crc >> 1) & 0x7F;
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
			}
		
			b = b >> 1;
     86a:	e6 95       	lsr	r30
     86c:	f2 cf       	rjmp	.-28     	; 0x852 <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
     86e:	4f 5f       	subi	r20, 0xFF	; 255
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	46 17       	cp	r20, r22
     874:	57 07       	cpc	r21, r23
     876:	41 f7       	brne	.-48     	; 0x848 <crc8+0xc>
		
		} while (bit_counter > 0);
	}
	
	return crc;
}
     878:	82 2f       	mov	r24, r18
     87a:	08 95       	ret

0000087c <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
     87c:	e0 91 c9 00 	lds	r30, 0x00C9
     880:	f0 91 ca 00 	lds	r31, 0x00CA
     884:	80 81       	ld	r24, Z
     886:	90 91 c8 00 	lds	r25, 0x00C8
}
     88a:	89 23       	and	r24, r25
     88c:	08 95       	ret

0000088e <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     88e:	e0 91 c6 00 	lds	r30, 0x00C6
     892:	f0 91 c7 00 	lds	r31, 0x00C7
     896:	80 81       	ld	r24, Z
     898:	90 91 c8 00 	lds	r25, 0x00C8
     89c:	89 2b       	or	r24, r25
     89e:	80 83       	st	Z, r24
	OW_DIR_OUT();
     8a0:	e0 91 cb 00 	lds	r30, 0x00CB
     8a4:	f0 91 cc 00 	lds	r31, 0x00CC
     8a8:	80 81       	ld	r24, Z
     8aa:	90 91 c8 00 	lds	r25, 0x00C8
     8ae:	89 2b       	or	r24, r25
     8b0:	80 83       	st	Z, r24
}
     8b2:	08 95       	ret

000008b4 <ow_parasite_disable>:

void ow_parasite_disable(void)
{
	OW_DIR_IN();
     8b4:	e0 91 cb 00 	lds	r30, 0x00CB
     8b8:	f0 91 cc 00 	lds	r31, 0x00CC
     8bc:	90 81       	ld	r25, Z
     8be:	80 91 c8 00 	lds	r24, 0x00C8
     8c2:	80 95       	com	r24
     8c4:	89 23       	and	r24, r25
     8c6:	80 83       	st	Z, r24
#if (!OW_USE_INTERNAL_PULLUP)
	OW_OUT_LOW();
#endif
}
     8c8:	08 95       	ret

000008ca <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     8ca:	e0 91 c6 00 	lds	r30, 0x00C6
     8ce:	f0 91 c7 00 	lds	r31, 0x00C7
     8d2:	90 81       	ld	r25, Z
     8d4:	80 91 c8 00 	lds	r24, 0x00C8
     8d8:	80 95       	com	r24
     8da:	89 23       	and	r24, r25
     8dc:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     8de:	e0 91 cb 00 	lds	r30, 0x00CB
     8e2:	f0 91 cc 00 	lds	r31, 0x00CC
     8e6:	80 81       	ld	r24, Z
     8e8:	90 91 c8 00 	lds	r25, 0x00C8
     8ec:	89 2b       	or	r24, r25
     8ee:	80 83       	st	Z, r24
     8f0:	80 ea       	ldi	r24, 0xA0	; 160
     8f2:	95 e0       	ldi	r25, 0x05	; 5
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <ow_reset+0x2a>
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8f8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8fa:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     8fc:	e0 91 cb 00 	lds	r30, 0x00CB
     900:	f0 91 cc 00 	lds	r31, 0x00CC
     904:	90 81       	ld	r25, Z
     906:	80 91 c8 00 	lds	r24, 0x00C8
     90a:	80 95       	com	r24
     90c:	89 23       	and	r24, r25
     90e:	80 83       	st	Z, r24
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     910:	e0 91 c6 00 	lds	r30, 0x00C6
     914:	f0 91 c7 00 	lds	r31, 0x00C7
     918:	80 81       	ld	r24, Z
     91a:	90 91 c8 00 	lds	r25, 0x00C8
     91e:	89 2b       	or	r24, r25
     920:	80 83       	st	Z, r24
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <ow_reset+0x5c>
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     92a:	e0 91 c9 00 	lds	r30, 0x00C9
     92e:	f0 91 ca 00 	lds	r31, 0x00CA
     932:	40 81       	ld	r20, Z
     934:	30 91 c8 00 	lds	r19, 0x00C8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     938:	2f bf       	out	0x3f, r18	; 63
     93a:	80 ee       	ldi	r24, 0xE0	; 224
     93c:	94 e0       	ldi	r25, 0x04	; 4
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <ow_reset+0x74>
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     942:	e0 91 c9 00 	lds	r30, 0x00C9
     946:	f0 91 ca 00 	lds	r31, 0x00CA
     94a:	80 81       	ld	r24, Z
     94c:	90 91 c8 00 	lds	r25, 0x00C8
     950:	89 23       	and	r24, r25
     952:	11 f4       	brne	.+4      	; 0x958 <ow_reset+0x8e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     958:	84 2f       	mov	r24, r20
     95a:	83 23       	and	r24, r19
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
	}
	
	return err;
}
     95c:	08 95       	ret

0000095e <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     95e:	50 93 cc 00 	sts	0x00CC, r21
     962:	40 93 cb 00 	sts	0x00CB, r20
	OW_OUT=out;
     966:	70 93 c7 00 	sts	0x00C7, r23
     96a:	60 93 c6 00 	sts	0x00C6, r22
	OW_IN=in;
     96e:	90 93 ca 00 	sts	0x00CA, r25
     972:	80 93 c9 00 	sts	0x00C9, r24
	OW_PIN_MASK = (1 << pin);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <ow_set_bus+0x22>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	2a 95       	dec	r18
     982:	e2 f7       	brpl	.-8      	; 0x97c <ow_set_bus+0x1e>
     984:	80 93 c8 00 	sts	0x00C8, r24
	ow_reset();
     988:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
}
     98c:	08 95       	ret

0000098e <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
     98e:	28 2f       	mov	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     990:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     992:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
     994:	e0 91 c6 00 	lds	r30, 0x00C6
     998:	f0 91 c7 00 	lds	r31, 0x00C7
     99c:	90 81       	ld	r25, Z
     99e:	80 91 c8 00 	lds	r24, 0x00C8
     9a2:	80 95       	com	r24
     9a4:	89 23       	and	r24, r25
     9a6:	80 83       	st	Z, r24
#endif
		OW_DIR_OUT();    // drive bus low
     9a8:	e0 91 cb 00 	lds	r30, 0x00CB
     9ac:	f0 91 cc 00 	lds	r31, 0x00CC
     9b0:	80 81       	ld	r24, Z
     9b2:	90 91 c8 00 	lds	r25, 0x00C8
     9b6:	89 2b       	or	r24, r25
     9b8:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	8a 95       	dec	r24
     9be:	f1 f7       	brne	.-4      	; 0x9bc <ow_bit_io_intern+0x2e>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
     9c0:	22 23       	and	r18, r18
     9c2:	99 f0       	breq	.+38     	; 0x9ea <ow_bit_io_intern+0x5c>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
     9c4:	e0 91 cb 00 	lds	r30, 0x00CB
     9c8:	f0 91 cc 00 	lds	r31, 0x00CC
     9cc:	90 81       	ld	r25, Z
     9ce:	80 91 c8 00 	lds	r24, 0x00C8
     9d2:	80 95       	com	r24
     9d4:	89 23       	and	r24, r25
     9d6:	80 83       	st	Z, r24
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
     9d8:	e0 91 c6 00 	lds	r30, 0x00C6
     9dc:	f0 91 c7 00 	lds	r31, 0x00C7
     9e0:	80 81       	ld	r24, Z
     9e2:	90 91 c8 00 	lds	r25, 0x00C8
     9e6:	89 2b       	or	r24, r25
     9e8:	80 83       	st	Z, r24
     9ea:	80 e3       	ldi	r24, 0x30	; 48
     9ec:	8a 95       	dec	r24
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <ow_bit_io_intern+0x5e>
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
     9f0:	e0 91 c9 00 	lds	r30, 0x00C9
     9f4:	f0 91 ca 00 	lds	r31, 0x00CA
     9f8:	80 81       	ld	r24, Z
     9fa:	90 91 c8 00 	lds	r25, 0x00C8
     9fe:	89 23       	and	r24, r25
     a00:	09 f4       	brne	.+2      	; 0xa04 <ow_bit_io_intern+0x76>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	80 eb       	ldi	r24, 0xB0	; 176
     a06:	8a 95       	dec	r24
     a08:	f1 f7       	brne	.-4      	; 0xa06 <ow_bit_io_intern+0x78>
			b = 0;  // sample at end of read-timeslot
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
     a0a:	e0 91 c6 00 	lds	r30, 0x00C6
     a0e:	f0 91 c7 00 	lds	r31, 0x00C7
     a12:	80 81       	ld	r24, Z
     a14:	89 2b       	or	r24, r25
     a16:	80 83       	st	Z, r24
#endif
		OW_DIR_IN();
     a18:	e0 91 cb 00 	lds	r30, 0x00CB
     a1c:	f0 91 cc 00 	lds	r31, 0x00CC
     a20:	90 81       	ld	r25, Z
     a22:	80 91 c8 00 	lds	r24, 0x00C8
     a26:	80 95       	com	r24
     a28:	89 23       	and	r24, r25
     a2a:	80 83       	st	Z, r24
	
		if ( with_parasite_enable ) {
     a2c:	66 23       	and	r22, r22
     a2e:	91 f0       	breq	.+36     	; 0xa54 <ow_bit_io_intern+0xc6>
	return OW_GET_IN();
}

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     a30:	e0 91 c6 00 	lds	r30, 0x00C6
     a34:	f0 91 c7 00 	lds	r31, 0x00C7
     a38:	80 81       	ld	r24, Z
     a3a:	90 91 c8 00 	lds	r25, 0x00C8
     a3e:	89 2b       	or	r24, r25
     a40:	80 83       	st	Z, r24
	OW_DIR_OUT();
     a42:	e0 91 cb 00 	lds	r30, 0x00CB
     a46:	f0 91 cc 00 	lds	r31, 0x00CC
     a4a:	80 81       	ld	r24, Z
     a4c:	90 91 c8 00 	lds	r25, 0x00C8
     a50:	89 2b       	or	r24, r25
     a52:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a54:	3f bf       	out	0x3f, r19	; 63
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	8a 95       	dec	r24
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <ow_bit_io_intern+0xca>
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
     a5c:	82 2f       	mov	r24, r18
     a5e:	08 95       	ret

00000a60 <ow_bit_io>:

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     a60:	81 70       	andi	r24, 0x01	; 1
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	0e 94 c7 04 	call	0x98e	; 0x98e <ow_bit_io_intern>
}
     a68:	08 95       	ret

00000a6a <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	18 2f       	mov	r17, r24
     a70:	08 e0       	ldi	r16, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     a72:	81 2f       	mov	r24, r17
     a74:	81 70       	andi	r24, 0x01	; 1
     a76:	0e 94 30 05 	call	0xa60	; 0xa60 <ow_bit_io>
		b >>= 1;
     a7a:	16 95       	lsr	r17
		if( j ) {
     a7c:	81 11       	cpse	r24, r1
			b |= 0x80;
     a7e:	10 68       	ori	r17, 0x80	; 128
		}
	} while( --i );
     a80:	01 50       	subi	r16, 0x01	; 1
     a82:	b9 f7       	brne	.-18     	; 0xa72 <ow_byte_wr+0x8>
	
	return b;
}
     a84:	81 2f       	mov	r24, r17
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	18 2f       	mov	r17, r24
     a92:	08 e0       	ldi	r16, 0x08	; 8
     a94:	81 2f       	mov	r24, r17
     a96:	81 70       	andi	r24, 0x01	; 1
	uint8_t i = 8, j;
	
	do {
		if ( i != 1 ) {
     a98:	01 30       	cpi	r16, 0x01	; 1
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <ow_byte_wr_with_parasite_enable+0x14>
			j = ow_bit_io_intern( b & 1, 0 );
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <ow_byte_wr_with_parasite_enable+0x16>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	0e 94 c7 04 	call	0x98e	; 0x98e <ow_bit_io_intern>
		}
		b >>= 1;
     aa6:	16 95       	lsr	r17
		if( j ) {
     aa8:	81 11       	cpse	r24, r1
			b |= 0x80;
     aaa:	10 68       	ori	r17, 0x80	; 128
		}
	} while( --i );
     aac:	01 50       	subi	r16, 0x01	; 1
     aae:	91 f7       	brne	.-28     	; 0xa94 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
     ab0:	81 2f       	mov	r24, r17
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
}
     abe:	08 95       	ret

00000ac0 <ow_rom_search>:


uint8_t ow_rom_search( uint8_t diff, uint8_t *id )
{
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	e8 2e       	mov	r14, r24
     ad0:	eb 01       	movw	r28, r22
	uint8_t i, j, next_diff;
	uint8_t b;
	
	if( ow_reset() ) {
     ad2:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
     ad6:	88 23       	and	r24, r24
     ad8:	a1 f5       	brne	.+104    	; 0xb42 <ow_rom_search+0x82>
		return OW_PRESENCE_ERR;         // error, no device found <--- early exit!
	}
	
	ow_byte_wr( OW_SEARCH_ROM );        // ROM search command
     ada:	80 ef       	ldi	r24, 0xF0	; 240
     adc:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
     ae0:	80 e4       	ldi	r24, 0x40	; 64
     ae2:	ff 24       	eor	r15, r15
     ae4:	18 2f       	mov	r17, r24
				*id |= 0x80;            // store bit
			}
			
			i--;
			
		} while( --j );
     ae6:	98 ef       	ldi	r25, 0xF8	; 248
     ae8:	d9 2e       	mov	r13, r25
     aea:	d8 0e       	add	r13, r24
	i = OW_ROMCODE_SIZE * 8;            // 8 bytes
	
	do {
		j = 8;                          // 8 bits
		do {
			b = ow_bit_io( 1 );         // read bit
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 30 05 	call	0xa60	; 0xa60 <ow_bit_io>
     af2:	08 2f       	mov	r16, r24
			if( ow_bit_io( 1 ) ) {      // read complement bit
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	0e 94 30 05 	call	0xa60	; 0xa60 <ow_bit_io>
     afa:	88 23       	and	r24, r24
     afc:	29 f0       	breq	.+10     	; 0xb08 <ow_rom_search+0x48>
				if( b ) {               // 0b11
     afe:	00 23       	and	r16, r16
     b00:	71 f0       	breq	.+28     	; 0xb1e <ow_rom_search+0x5e>
     b02:	8e ef       	ldi	r24, 0xFE	; 254
     b04:	f8 2e       	mov	r15, r24
     b06:	1f c0       	rjmp	.+62     	; 0xb46 <ow_rom_search+0x86>
					return OW_DATA_ERR; // data error <--- early exit!
				}
			}
			else {
				if( !b ) {              // 0b00 = 2 devices
     b08:	00 23       	and	r16, r16
     b0a:	49 f4       	brne	.+18     	; 0xb1e <ow_rom_search+0x5e>
					if( diff > i || ((*id & 1) && diff != i) ) {
     b0c:	1e 15       	cp	r17, r14
     b0e:	28 f0       	brcs	.+10     	; 0xb1a <ow_rom_search+0x5a>
     b10:	88 81       	ld	r24, Y
     b12:	80 ff       	sbrs	r24, 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <ow_rom_search+0x5e>
     b16:	e1 16       	cp	r14, r17
     b18:	11 f0       	breq	.+4      	; 0xb1e <ow_rom_search+0x5e>
     b1a:	f1 2e       	mov	r15, r17
     b1c:	01 e0       	ldi	r16, 0x01	; 1
						b = 1;          // now 1
						next_diff = i;  // next pass 0
					}
				}
			}
			ow_bit_io( b );             // write bit
     b1e:	80 2f       	mov	r24, r16
     b20:	0e 94 30 05 	call	0xa60	; 0xa60 <ow_bit_io>
			*id >>= 1;
     b24:	88 81       	ld	r24, Y
     b26:	86 95       	lsr	r24
     b28:	88 83       	st	Y, r24
			if( b ) {
     b2a:	00 23       	and	r16, r16
     b2c:	11 f0       	breq	.+4      	; 0xb32 <ow_rom_search+0x72>
				*id |= 0x80;            // store bit
     b2e:	80 68       	ori	r24, 0x80	; 128
     b30:	88 83       	st	Y, r24
			}
			
			i--;
     b32:	11 50       	subi	r17, 0x01	; 1
			
		} while( --j );
     b34:	1d 15       	cp	r17, r13
     b36:	d1 f6       	brne	.-76     	; 0xaec <ow_rom_search+0x2c>
		
		id++;                           // next byte
	
	} while( i );
     b38:	11 23       	and	r17, r17
     b3a:	29 f0       	breq	.+10     	; 0xb46 <ow_rom_search+0x86>
			
			i--;
			
		} while( --j );
		
		id++;                           // next byte
     b3c:	21 96       	adiw	r28, 0x01	; 1
     b3e:	81 2f       	mov	r24, r17
     b40:	d1 cf       	rjmp	.-94     	; 0xae4 <ow_rom_search+0x24>
     b42:	ff 24       	eor	r15, r15
     b44:	fa 94       	dec	r15
	
	} while( i );
	
	return next_diff;                   // to continue search
}
     b46:	8f 2d       	mov	r24, r15
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	08 95       	ret

00000b58 <ow_command_intern>:


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	08 2f       	mov	r16, r24
     b64:	eb 01       	movw	r28, r22
     b66:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
     b68:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>

	if( id ) {
     b6c:	20 97       	sbiw	r28, 0x00	; 0
     b6e:	51 f0       	breq	.+20     	; 0xb84 <ow_command_intern+0x2c>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     b70:	85 e5       	ldi	r24, 0x55	; 85
     b72:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
     b76:	18 e0       	ldi	r17, 0x08	; 8
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     b78:	89 91       	ld	r24, Y+
     b7a:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
			id++;
		} while( --i );
     b7e:	11 50       	subi	r17, 0x01	; 1
     b80:	d9 f7       	brne	.-10     	; 0xb78 <ow_command_intern+0x20>
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <ow_command_intern+0x32>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     b84:	8c ec       	ldi	r24, 0xCC	; 204
     b86:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
     b8a:	ff 20       	and	r15, r15
     b8c:	21 f0       	breq	.+8      	; 0xb96 <ow_command_intern+0x3e>
		ow_byte_wr_with_parasite_enable( command );
     b8e:	80 2f       	mov	r24, r16
     b90:	0e 94 46 05 	call	0xa8c	; 0xa8c <ow_byte_wr_with_parasite_enable>
     b94:	03 c0       	rjmp	.+6      	; 0xb9c <ow_command_intern+0x44>
	} else {
		ow_byte_wr( command );
     b96:	80 2f       	mov	r24, r16
     b98:	0e 94 35 05 	call	0xa6a	; 0xa6a <ow_byte_wr>
	}
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	08 95       	ret

00000ba8 <ow_command>:

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 ac 05 	call	0xb58	; 0xb58 <ow_command_intern>
}
     bae:	08 95       	ret

00000bb0 <ow_command_with_parasite_enable>:

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	0e 94 ac 05 	call	0xb58	; 0xb58 <ow_command_intern>
}
     bb6:	08 95       	ret

00000bb8 <DS18X20_read_decicelsius>:
#endif 
/* reads temperature (scratchpad) of sensor with rom-code id
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius( uint8_t id[], int16_t *decicelsius )
{
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	29 97       	sbiw	r28, 0x09	; 9
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	6c 01       	movw	r12, r24
     bde:	5b 01       	movw	r10, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
	
	ow_reset();
     be0:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
     be4:	8e eb       	ldi	r24, 0xBE	; 190
     be6:	b6 01       	movw	r22, r12
     be8:	0e 94 d4 05 	call	0xba8	; 0xba8 <ow_command>
     bec:	8e 01       	movw	r16, r28
     bee:	0f 5f       	subi	r16, 0xFF	; 255
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
	for ( i = 0; i < n; i++ ) {
     bf2:	8a e0       	ldi	r24, 0x0A	; 10
     bf4:	e8 2e       	mov	r14, r24
     bf6:	f1 2c       	mov	r15, r1
     bf8:	ec 0e       	add	r14, r28
     bfa:	fd 1e       	adc	r15, r29
		sp[i] = ow_byte_rd();
     bfc:	0e 94 5c 05 	call	0xab8	; 0xab8 <ow_byte_rd>
     c00:	f8 01       	movw	r30, r16
     c02:	81 93       	st	Z+, r24
     c04:	8f 01       	movw	r16, r30
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
     c06:	ee 15       	cp	r30, r14
     c08:	ff 05       	cpc	r31, r15
     c0a:	c1 f7       	brne	.-16     	; 0xbfc <DS18X20_read_decicelsius+0x44>
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	69 e0       	ldi	r22, 0x09	; 9
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	0e 94 1e 04 	call	0x83c	; 0x83c <crc8>
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <DS18X20_read_decicelsius+0x66>
     c1c:	76 c0       	rjmp	.+236    	; 0xd0a <DS18X20_read_decicelsius+0x152>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	63 c0       	rjmp	.+198    	; 0xce8 <DS18X20_read_decicelsius+0x130>
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
     c22:	ca 01       	movw	r24, r20
     c24:	8e 7f       	andi	r24, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
     c26:	b3 e0       	ldi	r27, 0x03	; 3
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	ba 95       	dec	r27
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <DS18X20_read_decicelsius+0x70>
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
     c30:	2f 81       	ldd	r18, Y+7	; 0x07
     c32:	4c e0       	ldi	r20, 0x0C	; 12
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	42 1b       	sub	r20, r18
     c38:	51 09       	sbc	r21, r1
     c3a:	48 0f       	add	r20, r24
     c3c:	59 1f       	adc	r21, r25
	}

	// check for negative 
	if ( measure & 0x8000 )  {
     c3e:	57 fd       	sbrc	r21, 7
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DS18X20_read_decicelsius+0x8e>
     c42:	e0 e0       	ldi	r30, 0x00	; 0
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <DS18X20_read_decicelsius+0x96>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
     c46:	50 95       	com	r21
     c48:	41 95       	neg	r20
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
	else {
		negative = 0;
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
     c4e:	68 32       	cpi	r22, 0x28	; 40
     c50:	11 f0       	breq	.+4      	; 0xc56 <DS18X20_read_decicelsius+0x9e>
     c52:	62 32       	cpi	r22, 0x22	; 34
     c54:	89 f4       	brne	.+34     	; 0xc78 <DS18X20_read_decicelsius+0xc0>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	80 76       	andi	r24, 0x60	; 96
     c5c:	90 70       	andi	r25, 0x00	; 0
     c5e:	80 32       	cpi	r24, 0x20	; 32
     c60:	91 05       	cpc	r25, r1
     c62:	39 f0       	breq	.+14     	; 0xc72 <DS18X20_read_decicelsius+0xba>
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	31 f0       	breq	.+12     	; 0xc76 <DS18X20_read_decicelsius+0xbe>
     c6a:	89 2b       	or	r24, r25
     c6c:	29 f4       	brne	.+10     	; 0xc78 <DS18X20_read_decicelsius+0xc0>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
     c6e:	48 7f       	andi	r20, 0xF8	; 248
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <DS18X20_read_decicelsius+0xc0>
			break;
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
     c72:	4c 7f       	andi	r20, 0xFC	; 252
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <DS18X20_read_decicelsius+0xc0>
			break;
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
     c76:	4e 7f       	andi	r20, 0xFE	; 254
	decicelsius = (measure >> 4);
	decicelsius *= 10;

	// decicelsius += ((measure & 0x000F) * 640 + 512) / 1024;
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
     c78:	9a 01       	movw	r18, r20
     c7a:	2f 70       	andi	r18, 0x0F	; 15
     c7c:	30 70       	andi	r19, 0x00	; 0
     c7e:	80 e8       	ldi	r24, 0x80	; 128
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	28 9f       	mul	r18, r24
     c84:	b0 01       	movw	r22, r0
     c86:	29 9f       	mul	r18, r25
     c88:	70 0d       	add	r23, r0
     c8a:	38 9f       	mul	r19, r24
     c8c:	70 0d       	add	r23, r0
     c8e:	11 24       	eor	r1, r1
	if ( !negative ) {
     c90:	ee 23       	and	r30, r30
     c92:	11 f4       	brne	.+4      	; 0xc98 <DS18X20_read_decicelsius+0xe0>
		fract += 512;
     c94:	60 50       	subi	r22, 0x00	; 0
     c96:	7e 4f       	sbci	r23, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	decicelsius = (measure >> 4);
     c98:	9a 01       	movw	r18, r20
     c9a:	a4 e0       	ldi	r26, 0x04	; 4
     c9c:	36 95       	lsr	r19
     c9e:	27 95       	ror	r18
     ca0:	aa 95       	dec	r26
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <DS18X20_read_decicelsius+0xe4>
	fract = ( measure & 0x000F ) * 640;
	if ( !negative ) {
		fract += 512;
	}
	fract /= 1024;
	decicelsius += fract;
     ca4:	ab 01       	movw	r20, r22
     ca6:	45 2f       	mov	r20, r21
     ca8:	55 27       	eor	r21, r21
     caa:	46 95       	lsr	r20
     cac:	46 95       	lsr	r20
     cae:	c9 01       	movw	r24, r18
     cb0:	73 e0       	ldi	r23, 0x03	; 3
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	7a 95       	dec	r23
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <DS18X20_read_decicelsius+0xfa>
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	48 0f       	add	r20, r24
     cc4:	59 1f       	adc	r21, r25

	if ( negative ) {
     cc6:	ee 23       	and	r30, r30
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <DS18X20_read_decicelsius+0x118>
		decicelsius = -decicelsius;
     cca:	50 95       	com	r21
     ccc:	41 95       	neg	r20
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	if ( /* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250 ) {
     cd0:	ca 01       	movw	r24, r20
     cd2:	8a 5d       	subi	r24, 0xDA	; 218
     cd4:	9d 4f       	sbci	r25, 0xFD	; 253
     cd6:	89 50       	subi	r24, 0x09	; 9
     cd8:	97 40       	sbci	r25, 0x07	; 7
     cda:	10 f0       	brcs	.+4      	; 0xce0 <DS18X20_read_decicelsius+0x128>
     cdc:	40 ed       	ldi	r20, 0xD0	; 208
     cde:	57 e0       	ldi	r21, 0x07	; 7
	uint8_t ret;
	
	ow_reset();
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
     ce0:	f5 01       	movw	r30, r10
     ce2:	51 83       	std	Z+1, r21	; 0x01
     ce4:	40 83       	st	Z, r20
     ce6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
     ce8:	29 96       	adiw	r28, 0x09	; 9
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	08 95       	ret
	uint8_t ret;
	
	ow_reset();
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
	if ( ret == DS18X20_OK ) {
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
     d0a:	f6 01       	movw	r30, r12
     d0c:	60 81       	ld	r22, Z
	uint16_t measure;
	uint8_t  negative;
	int16_t  decicelsius;
	uint16_t fract;

	measure = sp[0] | (sp[1] << 8);
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	29 81       	ldd	r18, Y+1	; 0x01
     d14:	42 2f       	mov	r20, r18
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	48 2b       	or	r20, r24
     d1a:	59 2b       	or	r21, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
     d1c:	60 31       	cpi	r22, 0x10	; 16
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DS18X20_read_decicelsius+0x16a>
     d20:	8e cf       	rjmp	.-228    	; 0xc3e <DS18X20_read_decicelsius+0x86>
     d22:	7f cf       	rjmp	.-258    	; 0xc22 <DS18X20_read_decicelsius+0x6a>

00000d24 <DS18X20_start_meas>:
}
#endif 
/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	18 2f       	mov	r17, r24
     d2c:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
     d2e:	0e 94 65 04 	call	0x8ca	; 0x8ca <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
     d32:	0e 94 3e 04 	call	0x87c	; 0x87c <ow_input_pin_state>
     d36:	88 23       	and	r24, r24
     d38:	11 f4       	brne	.+4      	; 0xd3e <DS18X20_start_meas+0x1a>
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <DS18X20_start_meas+0x32>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
     d3e:	11 30       	cpi	r17, 0x01	; 1
     d40:	29 f0       	breq	.+10     	; 0xd4c <DS18X20_start_meas+0x28>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
     d42:	84 e4       	ldi	r24, 0x44	; 68
     d44:	be 01       	movw	r22, r28
     d46:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <ow_command_with_parasite_enable>
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <DS18X20_start_meas+0x30>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
     d4c:	84 e4       	ldi	r24, 0x44	; 68
     d4e:	be 01       	movw	r22, r28
     d50:	0e 94 d4 05 	call	0xba8	; 0xba8 <ow_command>
     d54:	80 e0       	ldi	r24, 0x00	; 0
		uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
	}

	return ret;
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret

00000d5e <DS18X20_find_sensor>:
/* find DS18X20 Sensors on 1-Wire-Bus
   input/ouput: diff is the result of the last rom-search
                *diff = OW_SEARCH_FIRST for first call
   output: id is the rom-code of the sensor found */
uint8_t DS18X20_find_sensor( uint8_t *diff, uint8_t id[] )
{
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	8c 01       	movw	r16, r24
     d68:	eb 01       	movw	r28, r22
	uint8_t ret;

	ret = DS18X20_OK;
	go = 1;
	do {
		*diff = ow_rom_search( *diff, &id[0] );
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 81       	ld	r24, Z
     d6e:	be 01       	movw	r22, r28
     d70:	0e 94 60 05 	call	0xac0	; 0xac0 <ow_rom_search>
     d74:	f8 01       	movw	r30, r16
     d76:	80 83       	st	Z, r24
		if ( *diff == OW_PRESENCE_ERR || *diff == OW_DATA_ERR ||
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	8d 3f       	cpi	r24, 0xFD	; 253
     d7c:	10 f0       	brcs	.+4      	; 0xd82 <DS18X20_find_sensor+0x24>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <DS18X20_find_sensor+0x34>
		     *diff == OW_LAST_DEVICE ) { 
			go  = 0;
			ret = DS18X20_ERROR;
		} else {
			if ( id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE ||
     d82:	88 81       	ld	r24, Y
     d84:	88 32       	cpi	r24, 0x28	; 40
     d86:	21 f0       	breq	.+8      	; 0xd90 <DS18X20_find_sensor+0x32>
     d88:	80 31       	cpi	r24, 0x10	; 16
     d8a:	11 f0       	breq	.+4      	; 0xd90 <DS18X20_find_sensor+0x32>
     d8c:	82 32       	cpi	r24, 0x22	; 34
     d8e:	69 f7       	brne	.-38     	; 0xd6a <DS18X20_find_sensor+0xc>
     d90:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	} while (go);

	return ret;
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <vfprintf>:
     d9c:	a1 e1       	ldi	r26, 0x11	; 17
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 ed       	ldi	r30, 0xD4	; 212
     da2:	f6 e0       	ldi	r31, 0x06	; 6
     da4:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__prologue_saves__>
     da8:	3c 01       	movw	r6, r24
     daa:	7f 87       	std	Y+15, r23	; 0x0f
     dac:	6e 87       	std	Y+14, r22	; 0x0e
     dae:	6a 01       	movw	r12, r20
     db0:	fc 01       	movw	r30, r24
     db2:	17 82       	std	Z+7, r1	; 0x07
     db4:	16 82       	std	Z+6, r1	; 0x06
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	81 fd       	sbrc	r24, 1
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <vfprintf+0x26>
     dbc:	6f ef       	ldi	r22, 0xFF	; 255
     dbe:	7f ef       	ldi	r23, 0xFF	; 255
     dc0:	6f c3       	rjmp	.+1758   	; 0x14a0 <vfprintf+0x704>
     dc2:	9e 01       	movw	r18, r28
     dc4:	2f 5f       	subi	r18, 0xFF	; 255
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	39 8b       	std	Y+17, r19	; 0x11
     dca:	28 8b       	std	Y+16, r18	; 0x10
     dcc:	f3 01       	movw	r30, r6
     dce:	23 81       	ldd	r18, Z+3	; 0x03
     dd0:	ee 85       	ldd	r30, Y+14	; 0x0e
     dd2:	ff 85       	ldd	r31, Y+15	; 0x0f
     dd4:	23 fd       	sbrc	r18, 3
     dd6:	85 91       	lpm	r24, Z+
     dd8:	23 ff       	sbrs	r18, 3
     dda:	81 91       	ld	r24, Z+
     ddc:	ff 87       	std	Y+15, r31	; 0x0f
     dde:	ee 87       	std	Y+14, r30	; 0x0e
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <vfprintf+0x4a>
     de4:	5a c3       	rjmp	.+1716   	; 0x149a <vfprintf+0x6fe>
     de6:	85 32       	cpi	r24, 0x25	; 37
     de8:	51 f4       	brne	.+20     	; 0xdfe <vfprintf+0x62>
     dea:	ee 85       	ldd	r30, Y+14	; 0x0e
     dec:	ff 85       	ldd	r31, Y+15	; 0x0f
     dee:	23 fd       	sbrc	r18, 3
     df0:	85 91       	lpm	r24, Z+
     df2:	23 ff       	sbrs	r18, 3
     df4:	81 91       	ld	r24, Z+
     df6:	ff 87       	std	Y+15, r31	; 0x0f
     df8:	ee 87       	std	Y+14, r30	; 0x0e
     dfa:	85 32       	cpi	r24, 0x25	; 37
     dfc:	29 f4       	brne	.+10     	; 0xe08 <vfprintf+0x6c>
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	b3 01       	movw	r22, r6
     e02:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
     e06:	e2 cf       	rjmp	.-60     	; 0xdcc <vfprintf+0x30>
     e08:	98 2f       	mov	r25, r24
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	88 24       	eor	r8, r8
     e0e:	99 24       	eor	r9, r9
     e10:	10 32       	cpi	r17, 0x20	; 32
     e12:	b0 f4       	brcc	.+44     	; 0xe40 <vfprintf+0xa4>
     e14:	9b 32       	cpi	r25, 0x2B	; 43
     e16:	69 f0       	breq	.+26     	; 0xe32 <vfprintf+0x96>
     e18:	9c 32       	cpi	r25, 0x2C	; 44
     e1a:	28 f4       	brcc	.+10     	; 0xe26 <vfprintf+0x8a>
     e1c:	90 32       	cpi	r25, 0x20	; 32
     e1e:	51 f0       	breq	.+20     	; 0xe34 <vfprintf+0x98>
     e20:	93 32       	cpi	r25, 0x23	; 35
     e22:	71 f4       	brne	.+28     	; 0xe40 <vfprintf+0xa4>
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <vfprintf+0xa0>
     e26:	9d 32       	cpi	r25, 0x2D	; 45
     e28:	39 f0       	breq	.+14     	; 0xe38 <vfprintf+0x9c>
     e2a:	90 33       	cpi	r25, 0x30	; 48
     e2c:	49 f4       	brne	.+18     	; 0xe40 <vfprintf+0xa4>
     e2e:	11 60       	ori	r17, 0x01	; 1
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <vfprintf+0xe6>
     e32:	12 60       	ori	r17, 0x02	; 2
     e34:	14 60       	ori	r17, 0x04	; 4
     e36:	25 c0       	rjmp	.+74     	; 0xe82 <vfprintf+0xe6>
     e38:	18 60       	ori	r17, 0x08	; 8
     e3a:	23 c0       	rjmp	.+70     	; 0xe82 <vfprintf+0xe6>
     e3c:	10 61       	ori	r17, 0x10	; 16
     e3e:	21 c0       	rjmp	.+66     	; 0xe82 <vfprintf+0xe6>
     e40:	17 fd       	sbrc	r17, 7
     e42:	2a c0       	rjmp	.+84     	; 0xe98 <vfprintf+0xfc>
     e44:	89 2f       	mov	r24, r25
     e46:	80 53       	subi	r24, 0x30	; 48
     e48:	8a 30       	cpi	r24, 0x0A	; 10
     e4a:	78 f4       	brcc	.+30     	; 0xe6a <vfprintf+0xce>
     e4c:	16 ff       	sbrs	r17, 6
     e4e:	06 c0       	rjmp	.+12     	; 0xe5c <vfprintf+0xc0>
     e50:	fa e0       	ldi	r31, 0x0A	; 10
     e52:	9f 9e       	mul	r9, r31
     e54:	90 2c       	mov	r9, r0
     e56:	11 24       	eor	r1, r1
     e58:	98 0e       	add	r9, r24
     e5a:	13 c0       	rjmp	.+38     	; 0xe82 <vfprintf+0xe6>
     e5c:	3a e0       	ldi	r19, 0x0A	; 10
     e5e:	83 9e       	mul	r8, r19
     e60:	80 2c       	mov	r8, r0
     e62:	11 24       	eor	r1, r1
     e64:	88 0e       	add	r8, r24
     e66:	10 62       	ori	r17, 0x20	; 32
     e68:	0c c0       	rjmp	.+24     	; 0xe82 <vfprintf+0xe6>
     e6a:	9e 32       	cpi	r25, 0x2E	; 46
     e6c:	21 f4       	brne	.+8      	; 0xe76 <vfprintf+0xda>
     e6e:	16 fd       	sbrc	r17, 6
     e70:	14 c3       	rjmp	.+1576   	; 0x149a <vfprintf+0x6fe>
     e72:	10 64       	ori	r17, 0x40	; 64
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <vfprintf+0xe6>
     e76:	9c 36       	cpi	r25, 0x6C	; 108
     e78:	11 f4       	brne	.+4      	; 0xe7e <vfprintf+0xe2>
     e7a:	10 68       	ori	r17, 0x80	; 128
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0xe6>
     e7e:	98 36       	cpi	r25, 0x68	; 104
     e80:	59 f4       	brne	.+22     	; 0xe98 <vfprintf+0xfc>
     e82:	ee 85       	ldd	r30, Y+14	; 0x0e
     e84:	ff 85       	ldd	r31, Y+15	; 0x0f
     e86:	23 fd       	sbrc	r18, 3
     e88:	95 91       	lpm	r25, Z+
     e8a:	23 ff       	sbrs	r18, 3
     e8c:	91 91       	ld	r25, Z+
     e8e:	ff 87       	std	Y+15, r31	; 0x0f
     e90:	ee 87       	std	Y+14, r30	; 0x0e
     e92:	99 23       	and	r25, r25
     e94:	09 f0       	breq	.+2      	; 0xe98 <vfprintf+0xfc>
     e96:	bc cf       	rjmp	.-136    	; 0xe10 <vfprintf+0x74>
     e98:	89 2f       	mov	r24, r25
     e9a:	85 54       	subi	r24, 0x45	; 69
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	20 f4       	brcc	.+8      	; 0xea8 <vfprintf+0x10c>
     ea0:	81 2f       	mov	r24, r17
     ea2:	80 61       	ori	r24, 0x10	; 16
     ea4:	90 5e       	subi	r25, 0xE0	; 224
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <vfprintf+0x11a>
     ea8:	89 2f       	mov	r24, r25
     eaa:	85 56       	subi	r24, 0x65	; 101
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <vfprintf+0x116>
     eb0:	9f c1       	rjmp	.+830    	; 0x11f0 <vfprintf+0x454>
     eb2:	81 2f       	mov	r24, r17
     eb4:	8f 7e       	andi	r24, 0xEF	; 239
     eb6:	86 fd       	sbrc	r24, 6
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <vfprintf+0x122>
     eba:	76 e0       	ldi	r23, 0x06	; 6
     ebc:	97 2e       	mov	r9, r23
     ebe:	6f e3       	ldi	r22, 0x3F	; 63
     ec0:	f6 2e       	mov	r15, r22
     ec2:	f8 22       	and	r15, r24
     ec4:	95 36       	cpi	r25, 0x65	; 101
     ec6:	19 f4       	brne	.+6      	; 0xece <vfprintf+0x132>
     ec8:	f0 e4       	ldi	r31, 0x40	; 64
     eca:	ff 2a       	or	r15, r31
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <vfprintf+0x140>
     ece:	96 36       	cpi	r25, 0x66	; 102
     ed0:	19 f4       	brne	.+6      	; 0xed8 <vfprintf+0x13c>
     ed2:	20 e8       	ldi	r18, 0x80	; 128
     ed4:	f2 2a       	or	r15, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x140>
     ed8:	91 10       	cpse	r9, r1
     eda:	9a 94       	dec	r9
     edc:	f7 fe       	sbrs	r15, 7
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <vfprintf+0x158>
     ee0:	3b e3       	ldi	r19, 0x3B	; 59
     ee2:	39 15       	cp	r19, r9
     ee4:	18 f4       	brcc	.+6      	; 0xeec <vfprintf+0x150>
     ee6:	5c e3       	ldi	r21, 0x3C	; 60
     ee8:	b5 2e       	mov	r11, r21
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x154>
     eec:	b9 2c       	mov	r11, r9
     eee:	b3 94       	inc	r11
     ef0:	27 e0       	ldi	r18, 0x07	; 7
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <vfprintf+0x16a>
     ef4:	47 e0       	ldi	r20, 0x07	; 7
     ef6:	49 15       	cp	r20, r9
     ef8:	20 f4       	brcc	.+8      	; 0xf02 <vfprintf+0x166>
     efa:	bb 24       	eor	r11, r11
     efc:	47 e0       	ldi	r20, 0x07	; 7
     efe:	94 2e       	mov	r9, r20
     f00:	f7 cf       	rjmp	.-18     	; 0xef0 <vfprintf+0x154>
     f02:	29 2d       	mov	r18, r9
     f04:	bb 24       	eor	r11, r11
     f06:	c6 01       	movw	r24, r12
     f08:	04 96       	adiw	r24, 0x04	; 4
     f0a:	9d 87       	std	Y+13, r25	; 0x0d
     f0c:	8c 87       	std	Y+12, r24	; 0x0c
     f0e:	f6 01       	movw	r30, r12
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	ae 01       	movw	r20, r28
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	0b 2d       	mov	r16, r11
     f20:	0e 94 a7 0c 	call	0x194e	; 0x194e <__ftoa_engine>
     f24:	6c 01       	movw	r12, r24
     f26:	09 81       	ldd	r16, Y+1	; 0x01
     f28:	20 2e       	mov	r2, r16
     f2a:	33 24       	eor	r3, r3
     f2c:	00 ff       	sbrs	r16, 0
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <vfprintf+0x19c>
     f30:	03 fd       	sbrc	r16, 3
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vfprintf+0x19c>
     f34:	1d e2       	ldi	r17, 0x2D	; 45
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <vfprintf+0x1ae>
     f38:	f1 fe       	sbrs	r15, 1
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x1a4>
     f3c:	1b e2       	ldi	r17, 0x2B	; 43
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <vfprintf+0x1ae>
     f40:	f2 fc       	sbrc	r15, 2
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x1ac>
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <vfprintf+0x1ae>
     f48:	10 e2       	ldi	r17, 0x20	; 32
     f4a:	c1 01       	movw	r24, r2
     f4c:	8c 70       	andi	r24, 0x0C	; 12
     f4e:	90 70       	andi	r25, 0x00	; 0
     f50:	89 2b       	or	r24, r25
     f52:	b9 f1       	breq	.+110    	; 0xfc2 <vfprintf+0x226>
     f54:	11 23       	and	r17, r17
     f56:	11 f4       	brne	.+4      	; 0xf5c <vfprintf+0x1c0>
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <vfprintf+0x1c2>
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	88 15       	cp	r24, r8
     f60:	10 f0       	brcs	.+4      	; 0xf66 <vfprintf+0x1ca>
     f62:	88 24       	eor	r8, r8
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <vfprintf+0x1de>
     f66:	88 1a       	sub	r8, r24
     f68:	f3 fc       	sbrc	r15, 3
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <vfprintf+0x1de>
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	b3 01       	movw	r22, r6
     f72:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
     f76:	8a 94       	dec	r8
     f78:	c9 f7       	brne	.-14     	; 0xf6c <vfprintf+0x1d0>
     f7a:	11 23       	and	r17, r17
     f7c:	29 f0       	breq	.+10     	; 0xf88 <vfprintf+0x1ec>
     f7e:	81 2f       	mov	r24, r17
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	b3 01       	movw	r22, r6
     f84:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
     f88:	23 fe       	sbrs	r2, 3
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <vfprintf+0x1f6>
     f8c:	04 e5       	ldi	r16, 0x54	; 84
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	0e c0       	rjmp	.+28     	; 0xfae <vfprintf+0x212>
     f92:	08 e5       	ldi	r16, 0x58	; 88
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	0b c0       	rjmp	.+22     	; 0xfae <vfprintf+0x212>
     f98:	e1 14       	cp	r14, r1
     f9a:	f1 04       	cpc	r15, r1
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <vfprintf+0x204>
     f9e:	80 52       	subi	r24, 0x20	; 32
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	b3 01       	movw	r22, r6
     fa4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <vfprintf+0x21c>
     fae:	ef 2c       	mov	r14, r15
     fb0:	ff 24       	eor	r15, r15
     fb2:	f0 e1       	ldi	r31, 0x10	; 16
     fb4:	ef 22       	and	r14, r31
     fb6:	ff 24       	eor	r15, r15
     fb8:	f8 01       	movw	r30, r16
     fba:	84 91       	lpm	r24, Z+
     fbc:	88 23       	and	r24, r24
     fbe:	61 f7       	brne	.-40     	; 0xf98 <vfprintf+0x1fc>
     fc0:	14 c1       	rjmp	.+552    	; 0x11ea <vfprintf+0x44e>
     fc2:	f7 fe       	sbrs	r15, 7
     fc4:	12 c0       	rjmp	.+36     	; 0xfea <vfprintf+0x24e>
     fc6:	bc 0c       	add	r11, r12
     fc8:	24 fe       	sbrs	r2, 4
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <vfprintf+0x238>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	81 33       	cpi	r24, 0x31	; 49
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <vfprintf+0x238>
     fd2:	ba 94       	dec	r11
     fd4:	1b 14       	cp	r1, r11
     fd6:	1c f0       	brlt	.+6      	; 0xfde <vfprintf+0x242>
     fd8:	bb 24       	eor	r11, r11
     fda:	b3 94       	inc	r11
     fdc:	2d c0       	rjmp	.+90     	; 0x1038 <vfprintf+0x29c>
     fde:	f8 e0       	ldi	r31, 0x08	; 8
     fe0:	fb 15       	cp	r31, r11
     fe2:	50 f5       	brcc	.+84     	; 0x1038 <vfprintf+0x29c>
     fe4:	38 e0       	ldi	r19, 0x08	; 8
     fe6:	b3 2e       	mov	r11, r19
     fe8:	27 c0       	rjmp	.+78     	; 0x1038 <vfprintf+0x29c>
     fea:	f6 fc       	sbrc	r15, 6
     fec:	25 c0       	rjmp	.+74     	; 0x1038 <vfprintf+0x29c>
     fee:	89 2d       	mov	r24, r9
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	8c 15       	cp	r24, r12
     ff4:	9d 05       	cpc	r25, r13
     ff6:	4c f0       	brlt	.+18     	; 0x100a <vfprintf+0x26e>
     ff8:	2c ef       	ldi	r18, 0xFC	; 252
     ffa:	c2 16       	cp	r12, r18
     ffc:	2f ef       	ldi	r18, 0xFF	; 255
     ffe:	d2 06       	cpc	r13, r18
    1000:	24 f0       	brlt	.+8      	; 0x100a <vfprintf+0x26e>
    1002:	30 e8       	ldi	r19, 0x80	; 128
    1004:	f3 2a       	or	r15, r19
    1006:	01 c0       	rjmp	.+2      	; 0x100a <vfprintf+0x26e>
    1008:	9a 94       	dec	r9
    100a:	99 20       	and	r9, r9
    100c:	49 f0       	breq	.+18     	; 0x1020 <vfprintf+0x284>
    100e:	e2 e0       	ldi	r30, 0x02	; 2
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ec 0f       	add	r30, r28
    1014:	fd 1f       	adc	r31, r29
    1016:	e9 0d       	add	r30, r9
    1018:	f1 1d       	adc	r31, r1
    101a:	80 81       	ld	r24, Z
    101c:	80 33       	cpi	r24, 0x30	; 48
    101e:	a1 f3       	breq	.-24     	; 0x1008 <vfprintf+0x26c>
    1020:	f7 fe       	sbrs	r15, 7
    1022:	0a c0       	rjmp	.+20     	; 0x1038 <vfprintf+0x29c>
    1024:	b9 2c       	mov	r11, r9
    1026:	b3 94       	inc	r11
    1028:	89 2d       	mov	r24, r9
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	c8 16       	cp	r12, r24
    102e:	d9 06       	cpc	r13, r25
    1030:	14 f0       	brlt	.+4      	; 0x1036 <vfprintf+0x29a>
    1032:	99 24       	eor	r9, r9
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <vfprintf+0x29c>
    1036:	9c 18       	sub	r9, r12
    1038:	f7 fc       	sbrc	r15, 7
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <vfprintf+0x2a6>
    103c:	25 e0       	ldi	r18, 0x05	; 5
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	09 c0       	rjmp	.+18     	; 0x1054 <vfprintf+0x2b8>
    1042:	1c 14       	cp	r1, r12
    1044:	1d 04       	cpc	r1, r13
    1046:	1c f0       	brlt	.+6      	; 0x104e <vfprintf+0x2b2>
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfprintf+0x2b8>
    104e:	96 01       	movw	r18, r12
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	11 23       	and	r17, r17
    1056:	11 f0       	breq	.+4      	; 0x105c <vfprintf+0x2c0>
    1058:	2f 5f       	subi	r18, 0xFF	; 255
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	99 20       	and	r9, r9
    105e:	29 f0       	breq	.+10     	; 0x106a <vfprintf+0x2ce>
    1060:	89 2d       	mov	r24, r9
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	28 0f       	add	r18, r24
    1068:	39 1f       	adc	r19, r25
    106a:	88 2d       	mov	r24, r8
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	28 17       	cp	r18, r24
    1070:	39 07       	cpc	r19, r25
    1072:	14 f0       	brlt	.+4      	; 0x1078 <vfprintf+0x2dc>
    1074:	88 24       	eor	r8, r8
    1076:	01 c0       	rjmp	.+2      	; 0x107a <vfprintf+0x2de>
    1078:	82 1a       	sub	r8, r18
    107a:	4f 2c       	mov	r4, r15
    107c:	55 24       	eor	r5, r5
    107e:	c2 01       	movw	r24, r4
    1080:	89 70       	andi	r24, 0x09	; 9
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	89 2b       	or	r24, r25
    1086:	39 f0       	breq	.+14     	; 0x1096 <vfprintf+0x2fa>
    1088:	08 c0       	rjmp	.+16     	; 0x109a <vfprintf+0x2fe>
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	b3 01       	movw	r22, r6
    1090:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1094:	8a 94       	dec	r8
    1096:	88 20       	and	r8, r8
    1098:	c1 f7       	brne	.-16     	; 0x108a <vfprintf+0x2ee>
    109a:	11 23       	and	r17, r17
    109c:	29 f0       	breq	.+10     	; 0x10a8 <vfprintf+0x30c>
    109e:	81 2f       	mov	r24, r17
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	b3 01       	movw	r22, r6
    10a4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    10a8:	43 fe       	sbrs	r4, 3
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <vfprintf+0x31e>
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <vfprintf+0x322>
    10ae:	80 e3       	ldi	r24, 0x30	; 48
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	b3 01       	movw	r22, r6
    10b4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    10b8:	8a 94       	dec	r8
    10ba:	88 20       	and	r8, r8
    10bc:	c1 f7       	brne	.-16     	; 0x10ae <vfprintf+0x312>
    10be:	f7 fe       	sbrs	r15, 7
    10c0:	46 c0       	rjmp	.+140    	; 0x114e <vfprintf+0x3b2>
    10c2:	86 01       	movw	r16, r12
    10c4:	d7 fe       	sbrs	r13, 7
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x330>
    10c8:	00 e0       	ldi	r16, 0x00	; 0
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	76 01       	movw	r14, r12
    10ce:	08 94       	sec
    10d0:	e1 1c       	adc	r14, r1
    10d2:	f1 1c       	adc	r15, r1
    10d4:	e0 1a       	sub	r14, r16
    10d6:	f1 0a       	sbc	r15, r17
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	4c 0f       	add	r20, r28
    10de:	5d 1f       	adc	r21, r29
    10e0:	e4 0e       	add	r14, r20
    10e2:	f5 1e       	adc	r15, r21
    10e4:	26 01       	movw	r4, r12
    10e6:	4b 18       	sub	r4, r11
    10e8:	51 08       	sbc	r5, r1
    10ea:	89 2d       	mov	r24, r9
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	aa 24       	eor	r10, r10
    10f0:	bb 24       	eor	r11, r11
    10f2:	a8 1a       	sub	r10, r24
    10f4:	b9 0a       	sbc	r11, r25
    10f6:	5f ef       	ldi	r21, 0xFF	; 255
    10f8:	0f 3f       	cpi	r16, 0xFF	; 255
    10fa:	15 07       	cpc	r17, r21
    10fc:	29 f4       	brne	.+10     	; 0x1108 <vfprintf+0x36c>
    10fe:	8e e2       	ldi	r24, 0x2E	; 46
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b3 01       	movw	r22, r6
    1104:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1108:	c0 16       	cp	r12, r16
    110a:	d1 06       	cpc	r13, r17
    110c:	34 f0       	brlt	.+12     	; 0x111a <vfprintf+0x37e>
    110e:	40 16       	cp	r4, r16
    1110:	51 06       	cpc	r5, r17
    1112:	1c f4       	brge	.+6      	; 0x111a <vfprintf+0x37e>
    1114:	f7 01       	movw	r30, r14
    1116:	80 81       	ld	r24, Z
    1118:	01 c0       	rjmp	.+2      	; 0x111c <vfprintf+0x380>
    111a:	80 e3       	ldi	r24, 0x30	; 48
    111c:	01 50       	subi	r16, 0x01	; 1
    111e:	10 40       	sbci	r17, 0x00	; 0
    1120:	08 94       	sec
    1122:	e1 1c       	adc	r14, r1
    1124:	f1 1c       	adc	r15, r1
    1126:	0a 15       	cp	r16, r10
    1128:	1b 05       	cpc	r17, r11
    112a:	2c f0       	brlt	.+10     	; 0x1136 <vfprintf+0x39a>
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	b3 01       	movw	r22, r6
    1130:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1134:	e0 cf       	rjmp	.-64     	; 0x10f6 <vfprintf+0x35a>
    1136:	0c 15       	cp	r16, r12
    1138:	1d 05       	cpc	r17, r13
    113a:	39 f4       	brne	.+14     	; 0x114a <vfprintf+0x3ae>
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	96 33       	cpi	r25, 0x36	; 54
    1140:	18 f4       	brcc	.+6      	; 0x1148 <vfprintf+0x3ac>
    1142:	95 33       	cpi	r25, 0x35	; 53
    1144:	11 f4       	brne	.+4      	; 0x114a <vfprintf+0x3ae>
    1146:	24 fe       	sbrs	r2, 4
    1148:	81 e3       	ldi	r24, 0x31	; 49
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	4b c0       	rjmp	.+150    	; 0x11e4 <vfprintf+0x448>
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	81 33       	cpi	r24, 0x31	; 49
    1152:	09 f0       	breq	.+2      	; 0x1156 <vfprintf+0x3ba>
    1154:	0f 7e       	andi	r16, 0xEF	; 239
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b3 01       	movw	r22, r6
    115a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    115e:	99 20       	and	r9, r9
    1160:	a1 f0       	breq	.+40     	; 0x118a <vfprintf+0x3ee>
    1162:	8e e2       	ldi	r24, 0x2E	; 46
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b3 01       	movw	r22, r6
    1168:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    116c:	12 e0       	ldi	r17, 0x02	; 2
    116e:	e1 e0       	ldi	r30, 0x01	; 1
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	ec 0f       	add	r30, r28
    1174:	fd 1f       	adc	r31, r29
    1176:	e1 0f       	add	r30, r17
    1178:	f1 1d       	adc	r31, r1
    117a:	1f 5f       	subi	r17, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	b3 01       	movw	r22, r6
    1182:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1186:	9a 94       	dec	r9
    1188:	91 f7       	brne	.-28     	; 0x116e <vfprintf+0x3d2>
    118a:	44 fc       	sbrc	r4, 4
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <vfprintf+0x3f8>
    118e:	85 e6       	ldi	r24, 0x65	; 101
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0x3fc>
    1194:	85 e4       	ldi	r24, 0x45	; 69
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	b3 01       	movw	r22, r6
    119a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    119e:	d7 fc       	sbrc	r13, 7
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <vfprintf+0x410>
    11a2:	c1 14       	cp	r12, r1
    11a4:	d1 04       	cpc	r13, r1
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <vfprintf+0x41c>
    11a8:	04 ff       	sbrs	r16, 4
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <vfprintf+0x41c>
    11ac:	d0 94       	com	r13
    11ae:	c1 94       	neg	r12
    11b0:	d1 08       	sbc	r13, r1
    11b2:	d3 94       	inc	r13
    11b4:	8d e2       	ldi	r24, 0x2D	; 45
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <vfprintf+0x41e>
    11b8:	8b e2       	ldi	r24, 0x2B	; 43
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b3 01       	movw	r22, r6
    11be:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    11c2:	80 e3       	ldi	r24, 0x30	; 48
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <vfprintf+0x434>
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	26 ef       	ldi	r18, 0xF6	; 246
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	c2 0e       	add	r12, r18
    11ce:	d3 1e       	adc	r13, r19
    11d0:	3a e0       	ldi	r19, 0x0A	; 10
    11d2:	c3 16       	cp	r12, r19
    11d4:	d1 04       	cpc	r13, r1
    11d6:	bc f7       	brge	.-18     	; 0x11c6 <vfprintf+0x42a>
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	b3 01       	movw	r22, r6
    11dc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    11e0:	c6 01       	movw	r24, r12
    11e2:	c0 96       	adiw	r24, 0x30	; 48
    11e4:	b3 01       	movw	r22, r6
    11e6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    11ea:	cc 84       	ldd	r12, Y+12	; 0x0c
    11ec:	dd 84       	ldd	r13, Y+13	; 0x0d
    11ee:	52 c1       	rjmp	.+676    	; 0x1494 <vfprintf+0x6f8>
    11f0:	93 36       	cpi	r25, 0x63	; 99
    11f2:	31 f0       	breq	.+12     	; 0x1200 <vfprintf+0x464>
    11f4:	93 37       	cpi	r25, 0x73	; 115
    11f6:	99 f0       	breq	.+38     	; 0x121e <vfprintf+0x482>
    11f8:	93 35       	cpi	r25, 0x53	; 83
    11fa:	09 f0       	breq	.+2      	; 0x11fe <vfprintf+0x462>
    11fc:	59 c0       	rjmp	.+178    	; 0x12b0 <vfprintf+0x514>
    11fe:	23 c0       	rjmp	.+70     	; 0x1246 <vfprintf+0x4aa>
    1200:	f6 01       	movw	r30, r12
    1202:	80 81       	ld	r24, Z
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	5e 01       	movw	r10, r28
    1208:	08 94       	sec
    120a:	a1 1c       	adc	r10, r1
    120c:	b1 1c       	adc	r11, r1
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	c2 0e       	add	r12, r18
    1214:	d3 1e       	adc	r13, r19
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	e2 2e       	mov	r14, r18
    121a:	f1 2c       	mov	r15, r1
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <vfprintf+0x4a6>
    121e:	f6 01       	movw	r30, r12
    1220:	a0 80       	ld	r10, Z
    1222:	b1 80       	ldd	r11, Z+1	; 0x01
    1224:	16 fd       	sbrc	r17, 6
    1226:	03 c0       	rjmp	.+6      	; 0x122e <vfprintf+0x492>
    1228:	6f ef       	ldi	r22, 0xFF	; 255
    122a:	7f ef       	ldi	r23, 0xFF	; 255
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x496>
    122e:	69 2d       	mov	r22, r9
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	22 e0       	ldi	r18, 0x02	; 2
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	c2 0e       	add	r12, r18
    1238:	d3 1e       	adc	r13, r19
    123a:	c5 01       	movw	r24, r10
    123c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <strnlen>
    1240:	7c 01       	movw	r14, r24
    1242:	1f 77       	andi	r17, 0x7F	; 127
    1244:	13 c0       	rjmp	.+38     	; 0x126c <vfprintf+0x4d0>
    1246:	f6 01       	movw	r30, r12
    1248:	a0 80       	ld	r10, Z
    124a:	b1 80       	ldd	r11, Z+1	; 0x01
    124c:	16 fd       	sbrc	r17, 6
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x4ba>
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	7f ef       	ldi	r23, 0xFF	; 255
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x4be>
    1256:	69 2d       	mov	r22, r9
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	22 e0       	ldi	r18, 0x02	; 2
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	c2 0e       	add	r12, r18
    1260:	d3 1e       	adc	r13, r19
    1262:	c5 01       	movw	r24, r10
    1264:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <strnlen_P>
    1268:	7c 01       	movw	r14, r24
    126a:	10 68       	ori	r17, 0x80	; 128
    126c:	13 ff       	sbrs	r17, 3
    126e:	07 c0       	rjmp	.+14     	; 0x127e <vfprintf+0x4e2>
    1270:	1b c0       	rjmp	.+54     	; 0x12a8 <vfprintf+0x50c>
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	b3 01       	movw	r22, r6
    1278:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    127c:	8a 94       	dec	r8
    127e:	88 2d       	mov	r24, r8
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	e8 16       	cp	r14, r24
    1284:	f9 06       	cpc	r15, r25
    1286:	a8 f3       	brcs	.-22     	; 0x1272 <vfprintf+0x4d6>
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <vfprintf+0x50c>
    128a:	f5 01       	movw	r30, r10
    128c:	17 fd       	sbrc	r17, 7
    128e:	85 91       	lpm	r24, Z+
    1290:	17 ff       	sbrs	r17, 7
    1292:	81 91       	ld	r24, Z+
    1294:	5f 01       	movw	r10, r30
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	b3 01       	movw	r22, r6
    129a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    129e:	81 10       	cpse	r8, r1
    12a0:	8a 94       	dec	r8
    12a2:	08 94       	sec
    12a4:	e1 08       	sbc	r14, r1
    12a6:	f1 08       	sbc	r15, r1
    12a8:	e1 14       	cp	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	71 f7       	brne	.-36     	; 0x128a <vfprintf+0x4ee>
    12ae:	f2 c0       	rjmp	.+484    	; 0x1494 <vfprintf+0x6f8>
    12b0:	94 36       	cpi	r25, 0x64	; 100
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <vfprintf+0x51c>
    12b4:	99 36       	cpi	r25, 0x69	; 105
    12b6:	89 f5       	brne	.+98     	; 0x131a <vfprintf+0x57e>
    12b8:	17 ff       	sbrs	r17, 7
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <vfprintf+0x530>
    12bc:	f6 01       	movw	r30, r12
    12be:	20 81       	ld	r18, Z
    12c0:	31 81       	ldd	r19, Z+1	; 0x01
    12c2:	42 81       	ldd	r20, Z+2	; 0x02
    12c4:	53 81       	ldd	r21, Z+3	; 0x03
    12c6:	84 e0       	ldi	r24, 0x04	; 4
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <vfprintf+0x544>
    12cc:	f6 01       	movw	r30, r12
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	9c 01       	movw	r18, r24
    12d4:	44 27       	eor	r20, r20
    12d6:	37 fd       	sbrc	r19, 7
    12d8:	40 95       	com	r20
    12da:	54 2f       	mov	r21, r20
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	c8 0e       	add	r12, r24
    12e2:	d9 1e       	adc	r13, r25
    12e4:	9f e6       	ldi	r25, 0x6F	; 111
    12e6:	f9 2e       	mov	r15, r25
    12e8:	f1 22       	and	r15, r17
    12ea:	57 ff       	sbrs	r21, 7
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <vfprintf+0x564>
    12ee:	50 95       	com	r21
    12f0:	40 95       	com	r20
    12f2:	30 95       	com	r19
    12f4:	21 95       	neg	r18
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	4f 4f       	sbci	r20, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	90 e8       	ldi	r25, 0x80	; 128
    12fe:	f9 2a       	or	r15, r25
    1300:	ca 01       	movw	r24, r20
    1302:	b9 01       	movw	r22, r18
    1304:	ae 01       	movw	r20, r28
    1306:	4f 5f       	subi	r20, 0xFF	; 255
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	2a e0       	ldi	r18, 0x0A	; 10
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    1312:	e8 2e       	mov	r14, r24
    1314:	e8 89       	ldd	r30, Y+16	; 0x10
    1316:	ee 1a       	sub	r14, r30
    1318:	41 c0       	rjmp	.+130    	; 0x139c <vfprintf+0x600>
    131a:	95 37       	cpi	r25, 0x75	; 117
    131c:	21 f4       	brne	.+8      	; 0x1326 <vfprintf+0x58a>
    131e:	1f 7e       	andi	r17, 0xEF	; 239
    1320:	2a e0       	ldi	r18, 0x0A	; 10
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	1c c0       	rjmp	.+56     	; 0x135e <vfprintf+0x5c2>
    1326:	19 7f       	andi	r17, 0xF9	; 249
    1328:	9f 36       	cpi	r25, 0x6F	; 111
    132a:	61 f0       	breq	.+24     	; 0x1344 <vfprintf+0x5a8>
    132c:	90 37       	cpi	r25, 0x70	; 112
    132e:	20 f4       	brcc	.+8      	; 0x1338 <vfprintf+0x59c>
    1330:	98 35       	cpi	r25, 0x58	; 88
    1332:	09 f0       	breq	.+2      	; 0x1336 <vfprintf+0x59a>
    1334:	b2 c0       	rjmp	.+356    	; 0x149a <vfprintf+0x6fe>
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <vfprintf+0x5ba>
    1338:	90 37       	cpi	r25, 0x70	; 112
    133a:	39 f0       	breq	.+14     	; 0x134a <vfprintf+0x5ae>
    133c:	98 37       	cpi	r25, 0x78	; 120
    133e:	09 f0       	breq	.+2      	; 0x1342 <vfprintf+0x5a6>
    1340:	ac c0       	rjmp	.+344    	; 0x149a <vfprintf+0x6fe>
    1342:	04 c0       	rjmp	.+8      	; 0x134c <vfprintf+0x5b0>
    1344:	28 e0       	ldi	r18, 0x08	; 8
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	0a c0       	rjmp	.+20     	; 0x135e <vfprintf+0x5c2>
    134a:	10 61       	ori	r17, 0x10	; 16
    134c:	14 fd       	sbrc	r17, 4
    134e:	14 60       	ori	r17, 0x04	; 4
    1350:	20 e1       	ldi	r18, 0x10	; 16
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	04 c0       	rjmp	.+8      	; 0x135e <vfprintf+0x5c2>
    1356:	14 fd       	sbrc	r17, 4
    1358:	16 60       	ori	r17, 0x06	; 6
    135a:	20 e1       	ldi	r18, 0x10	; 16
    135c:	32 e0       	ldi	r19, 0x02	; 2
    135e:	17 ff       	sbrs	r17, 7
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <vfprintf+0x5d6>
    1362:	f6 01       	movw	r30, r12
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	44 e0       	ldi	r20, 0x04	; 4
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	08 c0       	rjmp	.+16     	; 0x1382 <vfprintf+0x5e6>
    1372:	f6 01       	movw	r30, r12
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	bc 01       	movw	r22, r24
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	c4 0e       	add	r12, r20
    1384:	d5 1e       	adc	r13, r21
    1386:	ae 01       	movw	r20, r28
    1388:	4f 5f       	subi	r20, 0xFF	; 255
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    1390:	e8 2e       	mov	r14, r24
    1392:	58 89       	ldd	r21, Y+16	; 0x10
    1394:	e5 1a       	sub	r14, r21
    1396:	8f e7       	ldi	r24, 0x7F	; 127
    1398:	f8 2e       	mov	r15, r24
    139a:	f1 22       	and	r15, r17
    139c:	f6 fe       	sbrs	r15, 6
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <vfprintf+0x61a>
    13a0:	8e ef       	ldi	r24, 0xFE	; 254
    13a2:	f8 22       	and	r15, r24
    13a4:	e9 14       	cp	r14, r9
    13a6:	38 f4       	brcc	.+14     	; 0x13b6 <vfprintf+0x61a>
    13a8:	f4 fe       	sbrs	r15, 4
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <vfprintf+0x61e>
    13ac:	f2 fc       	sbrc	r15, 2
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <vfprintf+0x61e>
    13b0:	9f ee       	ldi	r25, 0xEF	; 239
    13b2:	f9 22       	and	r15, r25
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x61e>
    13b6:	1e 2d       	mov	r17, r14
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <vfprintf+0x620>
    13ba:	19 2d       	mov	r17, r9
    13bc:	f4 fe       	sbrs	r15, 4
    13be:	0d c0       	rjmp	.+26     	; 0x13da <vfprintf+0x63e>
    13c0:	fe 01       	movw	r30, r28
    13c2:	ee 0d       	add	r30, r14
    13c4:	f1 1d       	adc	r31, r1
    13c6:	80 81       	ld	r24, Z
    13c8:	80 33       	cpi	r24, 0x30	; 48
    13ca:	19 f4       	brne	.+6      	; 0x13d2 <vfprintf+0x636>
    13cc:	e9 ee       	ldi	r30, 0xE9	; 233
    13ce:	fe 22       	and	r15, r30
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <vfprintf+0x646>
    13d2:	1f 5f       	subi	r17, 0xFF	; 255
    13d4:	f2 fe       	sbrs	r15, 2
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <vfprintf+0x646>
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <vfprintf+0x644>
    13da:	8f 2d       	mov	r24, r15
    13dc:	86 78       	andi	r24, 0x86	; 134
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0x646>
    13e0:	1f 5f       	subi	r17, 0xFF	; 255
    13e2:	0f 2d       	mov	r16, r15
    13e4:	f3 fc       	sbrc	r15, 3
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <vfprintf+0x674>
    13e8:	f0 fe       	sbrs	r15, 0
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <vfprintf+0x66e>
    13ec:	18 15       	cp	r17, r8
    13ee:	10 f0       	brcs	.+4      	; 0x13f4 <vfprintf+0x658>
    13f0:	9e 2c       	mov	r9, r14
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <vfprintf+0x66e>
    13f4:	9e 2c       	mov	r9, r14
    13f6:	98 0c       	add	r9, r8
    13f8:	91 1a       	sub	r9, r17
    13fa:	18 2d       	mov	r17, r8
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x66e>
    13fe:	80 e2       	ldi	r24, 0x20	; 32
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	b3 01       	movw	r22, r6
    1404:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1408:	1f 5f       	subi	r17, 0xFF	; 255
    140a:	18 15       	cp	r17, r8
    140c:	c0 f3       	brcs	.-16     	; 0x13fe <vfprintf+0x662>
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <vfprintf+0x67c>
    1410:	18 15       	cp	r17, r8
    1412:	10 f4       	brcc	.+4      	; 0x1418 <vfprintf+0x67c>
    1414:	81 1a       	sub	r8, r17
    1416:	01 c0       	rjmp	.+2      	; 0x141a <vfprintf+0x67e>
    1418:	88 24       	eor	r8, r8
    141a:	04 ff       	sbrs	r16, 4
    141c:	0f c0       	rjmp	.+30     	; 0x143c <vfprintf+0x6a0>
    141e:	80 e3       	ldi	r24, 0x30	; 48
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	b3 01       	movw	r22, r6
    1424:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1428:	02 ff       	sbrs	r16, 2
    142a:	1d c0       	rjmp	.+58     	; 0x1466 <vfprintf+0x6ca>
    142c:	01 fd       	sbrc	r16, 1
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <vfprintf+0x69a>
    1430:	88 e7       	ldi	r24, 0x78	; 120
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <vfprintf+0x6b6>
    1436:	88 e5       	ldi	r24, 0x58	; 88
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <vfprintf+0x6b6>
    143c:	80 2f       	mov	r24, r16
    143e:	86 78       	andi	r24, 0x86	; 134
    1440:	91 f0       	breq	.+36     	; 0x1466 <vfprintf+0x6ca>
    1442:	01 ff       	sbrs	r16, 1
    1444:	02 c0       	rjmp	.+4      	; 0x144a <vfprintf+0x6ae>
    1446:	8b e2       	ldi	r24, 0x2B	; 43
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x6b0>
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	f7 fc       	sbrc	r15, 7
    144e:	8d e2       	ldi	r24, 0x2D	; 45
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b3 01       	movw	r22, r6
    1454:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <vfprintf+0x6ca>
    145a:	80 e3       	ldi	r24, 0x30	; 48
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	b3 01       	movw	r22, r6
    1460:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1464:	9a 94       	dec	r9
    1466:	e9 14       	cp	r14, r9
    1468:	c0 f3       	brcs	.-16     	; 0x145a <vfprintf+0x6be>
    146a:	ea 94       	dec	r14
    146c:	e1 e0       	ldi	r30, 0x01	; 1
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	ec 0f       	add	r30, r28
    1472:	fd 1f       	adc	r31, r29
    1474:	ee 0d       	add	r30, r14
    1476:	f1 1d       	adc	r31, r1
    1478:	80 81       	ld	r24, Z
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	b3 01       	movw	r22, r6
    147e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1482:	ee 20       	and	r14, r14
    1484:	91 f7       	brne	.-28     	; 0x146a <vfprintf+0x6ce>
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <vfprintf+0x6f8>
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b3 01       	movw	r22, r6
    148e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <fputc>
    1492:	8a 94       	dec	r8
    1494:	88 20       	and	r8, r8
    1496:	c1 f7       	brne	.-16     	; 0x1488 <vfprintf+0x6ec>
    1498:	99 cc       	rjmp	.-1742   	; 0xdcc <vfprintf+0x30>
    149a:	f3 01       	movw	r30, r6
    149c:	66 81       	ldd	r22, Z+6	; 0x06
    149e:	77 81       	ldd	r23, Z+7	; 0x07
    14a0:	cb 01       	movw	r24, r22
    14a2:	61 96       	adiw	r28, 0x11	; 17
    14a4:	e2 e1       	ldi	r30, 0x12	; 18
    14a6:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__epilogue_restores__>

000014aa <__subsf3>:
    14aa:	50 58       	subi	r21, 0x80	; 128

000014ac <__addsf3>:
    14ac:	bb 27       	eor	r27, r27
    14ae:	aa 27       	eor	r26, r26
    14b0:	0e d0       	rcall	.+28     	; 0x14ce <__addsf3x>
    14b2:	75 c1       	rjmp	.+746    	; 0x179e <__fp_round>
    14b4:	66 d1       	rcall	.+716    	; 0x1782 <__fp_pscA>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__addsf3+0x18>
    14b8:	6b d1       	rcall	.+726    	; 0x1790 <__fp_pscB>
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__addsf3+0x18>
    14bc:	31 f4       	brne	.+12     	; 0x14ca <__addsf3+0x1e>
    14be:	9f 3f       	cpi	r25, 0xFF	; 255
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <__addsf3+0x1a>
    14c2:	1e f4       	brtc	.+6      	; 0x14ca <__addsf3+0x1e>
    14c4:	5b c1       	rjmp	.+694    	; 0x177c <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x1e>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	51 c1       	rjmp	.+674    	; 0x1770 <__fp_inf>

000014ce <__addsf3x>:
    14ce:	e9 2f       	mov	r30, r25
    14d0:	77 d1       	rcall	.+750    	; 0x17c0 <__fp_split3>
    14d2:	80 f3       	brcs	.-32     	; 0x14b4 <__addsf3+0x8>
    14d4:	ba 17       	cp	r27, r26
    14d6:	62 07       	cpc	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	95 07       	cpc	r25, r21
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <__addsf3x+0x18>
    14e0:	71 f4       	brne	.+28     	; 0x14fe <__addsf3x+0x30>
    14e2:	9e f5       	brtc	.+102    	; 0x154a <__addsf3x+0x7c>
    14e4:	8f c1       	rjmp	.+798    	; 0x1804 <__fp_zero>
    14e6:	0e f4       	brtc	.+2      	; 0x14ea <__addsf3x+0x1c>
    14e8:	e0 95       	com	r30
    14ea:	0b 2e       	mov	r0, r27
    14ec:	ba 2f       	mov	r27, r26
    14ee:	a0 2d       	mov	r26, r0
    14f0:	0b 01       	movw	r0, r22
    14f2:	b9 01       	movw	r22, r18
    14f4:	90 01       	movw	r18, r0
    14f6:	0c 01       	movw	r0, r24
    14f8:	ca 01       	movw	r24, r20
    14fa:	a0 01       	movw	r20, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	ff 27       	eor	r31, r31
    1500:	59 1b       	sub	r21, r25
    1502:	99 f0       	breq	.+38     	; 0x152a <__addsf3x+0x5c>
    1504:	59 3f       	cpi	r21, 0xF9	; 249
    1506:	50 f4       	brcc	.+20     	; 0x151c <__addsf3x+0x4e>
    1508:	50 3e       	cpi	r21, 0xE0	; 224
    150a:	68 f1       	brcs	.+90     	; 0x1566 <__addsf3x+0x98>
    150c:	1a 16       	cp	r1, r26
    150e:	f0 40       	sbci	r31, 0x00	; 0
    1510:	a2 2f       	mov	r26, r18
    1512:	23 2f       	mov	r18, r19
    1514:	34 2f       	mov	r19, r20
    1516:	44 27       	eor	r20, r20
    1518:	58 5f       	subi	r21, 0xF8	; 248
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <__addsf3x+0x34>
    151c:	46 95       	lsr	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	a7 95       	ror	r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	53 95       	inc	r21
    1528:	c9 f7       	brne	.-14     	; 0x151c <__addsf3x+0x4e>
    152a:	7e f4       	brtc	.+30     	; 0x154a <__addsf3x+0x7c>
    152c:	1f 16       	cp	r1, r31
    152e:	ba 0b       	sbc	r27, r26
    1530:	62 0b       	sbc	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba f0       	brmi	.+46     	; 0x1566 <__addsf3x+0x98>
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	a1 f0       	breq	.+40     	; 0x1564 <__addsf3x+0x96>
    153c:	ff 0f       	add	r31, r31
    153e:	bb 1f       	adc	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	c2 f7       	brpl	.-16     	; 0x1538 <__addsf3x+0x6a>
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <__addsf3x+0x98>
    154a:	ba 0f       	add	r27, r26
    154c:	62 1f       	adc	r22, r18
    154e:	73 1f       	adc	r23, r19
    1550:	84 1f       	adc	r24, r20
    1552:	48 f4       	brcc	.+18     	; 0x1566 <__addsf3x+0x98>
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	9e 3f       	cpi	r25, 0xFE	; 254
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__addsf3x+0x96>
    1562:	b3 cf       	rjmp	.-154    	; 0x14ca <__addsf3+0x1e>
    1564:	93 95       	inc	r25
    1566:	88 0f       	add	r24, r24
    1568:	08 f0       	brcs	.+2      	; 0x156c <__addsf3x+0x9e>
    156a:	99 27       	eor	r25, r25
    156c:	ee 0f       	add	r30, r30
    156e:	97 95       	ror	r25
    1570:	87 95       	ror	r24
    1572:	08 95       	ret

00001574 <__cmpsf2>:
    1574:	d9 d0       	rcall	.+434    	; 0x1728 <__fp_cmp>
    1576:	08 f4       	brcc	.+2      	; 0x157a <__cmpsf2+0x6>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret

0000157c <__divsf3>:
    157c:	0c d0       	rcall	.+24     	; 0x1596 <__divsf3x>
    157e:	0f c1       	rjmp	.+542    	; 0x179e <__fp_round>
    1580:	07 d1       	rcall	.+526    	; 0x1790 <__fp_pscB>
    1582:	40 f0       	brcs	.+16     	; 0x1594 <__divsf3+0x18>
    1584:	fe d0       	rcall	.+508    	; 0x1782 <__fp_pscA>
    1586:	30 f0       	brcs	.+12     	; 0x1594 <__divsf3+0x18>
    1588:	21 f4       	brne	.+8      	; 0x1592 <__divsf3+0x16>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	19 f0       	breq	.+6      	; 0x1594 <__divsf3+0x18>
    158e:	f0 c0       	rjmp	.+480    	; 0x1770 <__fp_inf>
    1590:	51 11       	cpse	r21, r1
    1592:	39 c1       	rjmp	.+626    	; 0x1806 <__fp_szero>
    1594:	f3 c0       	rjmp	.+486    	; 0x177c <__fp_nan>

00001596 <__divsf3x>:
    1596:	14 d1       	rcall	.+552    	; 0x17c0 <__fp_split3>
    1598:	98 f3       	brcs	.-26     	; 0x1580 <__divsf3+0x4>

0000159a <__divsf3_pse>:
    159a:	99 23       	and	r25, r25
    159c:	c9 f3       	breq	.-14     	; 0x1590 <__divsf3+0x14>
    159e:	55 23       	and	r21, r21
    15a0:	b1 f3       	breq	.-20     	; 0x158e <__divsf3+0x12>
    15a2:	95 1b       	sub	r25, r21
    15a4:	55 0b       	sbc	r21, r21
    15a6:	bb 27       	eor	r27, r27
    15a8:	aa 27       	eor	r26, r26
    15aa:	62 17       	cp	r22, r18
    15ac:	73 07       	cpc	r23, r19
    15ae:	84 07       	cpc	r24, r20
    15b0:	38 f0       	brcs	.+14     	; 0x15c0 <__divsf3_pse+0x26>
    15b2:	9f 5f       	subi	r25, 0xFF	; 255
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	44 1f       	adc	r20, r20
    15bc:	aa 1f       	adc	r26, r26
    15be:	a9 f3       	breq	.-22     	; 0x15aa <__divsf3_pse+0x10>
    15c0:	33 d0       	rcall	.+102    	; 0x1628 <__divsf3_pse+0x8e>
    15c2:	0e 2e       	mov	r0, r30
    15c4:	3a f0       	brmi	.+14     	; 0x15d4 <__divsf3_pse+0x3a>
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	30 d0       	rcall	.+96     	; 0x162a <__divsf3_pse+0x90>
    15ca:	91 50       	subi	r25, 0x01	; 1
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	e6 95       	lsr	r30
    15d0:	00 1c       	adc	r0, r0
    15d2:	ca f7       	brpl	.-14     	; 0x15c6 <__divsf3_pse+0x2c>
    15d4:	29 d0       	rcall	.+82     	; 0x1628 <__divsf3_pse+0x8e>
    15d6:	fe 2f       	mov	r31, r30
    15d8:	27 d0       	rcall	.+78     	; 0x1628 <__divsf3_pse+0x8e>
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	bb 1f       	adc	r27, r27
    15e2:	26 17       	cp	r18, r22
    15e4:	37 07       	cpc	r19, r23
    15e6:	48 07       	cpc	r20, r24
    15e8:	ab 07       	cpc	r26, r27
    15ea:	b0 e8       	ldi	r27, 0x80	; 128
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__divsf3_pse+0x56>
    15ee:	bb 0b       	sbc	r27, r27
    15f0:	80 2d       	mov	r24, r0
    15f2:	bf 01       	movw	r22, r30
    15f4:	ff 27       	eor	r31, r31
    15f6:	93 58       	subi	r25, 0x83	; 131
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	2a f0       	brmi	.+10     	; 0x1606 <__divsf3_pse+0x6c>
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	51 05       	cpc	r21, r1
    1600:	68 f0       	brcs	.+26     	; 0x161c <__divsf3_pse+0x82>
    1602:	b6 c0       	rjmp	.+364    	; 0x1770 <__fp_inf>
    1604:	00 c1       	rjmp	.+512    	; 0x1806 <__fp_szero>
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	ec f3       	brlt	.-6      	; 0x1604 <__divsf3_pse+0x6a>
    160a:	98 3e       	cpi	r25, 0xE8	; 232
    160c:	dc f3       	brlt	.-10     	; 0x1604 <__divsf3_pse+0x6a>
    160e:	86 95       	lsr	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	b7 95       	ror	r27
    1616:	f7 95       	ror	r31
    1618:	9f 5f       	subi	r25, 0xFF	; 255
    161a:	c9 f7       	brne	.-14     	; 0x160e <__divsf3_pse+0x74>
    161c:	88 0f       	add	r24, r24
    161e:	91 1d       	adc	r25, r1
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret
    1628:	e1 e0       	ldi	r30, 0x01	; 1
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	bb 1f       	adc	r27, r27
    1632:	62 17       	cp	r22, r18
    1634:	73 07       	cpc	r23, r19
    1636:	84 07       	cpc	r24, r20
    1638:	ba 07       	cpc	r27, r26
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__divsf3_pse+0xaa>
    163c:	62 1b       	sub	r22, r18
    163e:	73 0b       	sbc	r23, r19
    1640:	84 0b       	sbc	r24, r20
    1642:	ba 0b       	sbc	r27, r26
    1644:	ee 1f       	adc	r30, r30
    1646:	88 f7       	brcc	.-30     	; 0x162a <__divsf3_pse+0x90>
    1648:	e0 95       	com	r30
    164a:	08 95       	ret

0000164c <__fixsfsi>:
    164c:	04 d0       	rcall	.+8      	; 0x1656 <__fixunssfsi>
    164e:	68 94       	set
    1650:	b1 11       	cpse	r27, r1
    1652:	d9 c0       	rjmp	.+434    	; 0x1806 <__fp_szero>
    1654:	08 95       	ret

00001656 <__fixunssfsi>:
    1656:	bc d0       	rcall	.+376    	; 0x17d0 <__fp_splitA>
    1658:	88 f0       	brcs	.+34     	; 0x167c <__fixunssfsi+0x26>
    165a:	9f 57       	subi	r25, 0x7F	; 127
    165c:	90 f0       	brcs	.+36     	; 0x1682 <__fixunssfsi+0x2c>
    165e:	b9 2f       	mov	r27, r25
    1660:	99 27       	eor	r25, r25
    1662:	b7 51       	subi	r27, 0x17	; 23
    1664:	a0 f0       	brcs	.+40     	; 0x168e <__fixunssfsi+0x38>
    1666:	d1 f0       	breq	.+52     	; 0x169c <__fixunssfsi+0x46>
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	1a f0       	brmi	.+6      	; 0x1678 <__fixunssfsi+0x22>
    1672:	ba 95       	dec	r27
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__fixunssfsi+0x12>
    1676:	12 c0       	rjmp	.+36     	; 0x169c <__fixunssfsi+0x46>
    1678:	b1 30       	cpi	r27, 0x01	; 1
    167a:	81 f0       	breq	.+32     	; 0x169c <__fixunssfsi+0x46>
    167c:	c3 d0       	rcall	.+390    	; 0x1804 <__fp_zero>
    167e:	b1 e0       	ldi	r27, 0x01	; 1
    1680:	08 95       	ret
    1682:	c0 c0       	rjmp	.+384    	; 0x1804 <__fp_zero>
    1684:	67 2f       	mov	r22, r23
    1686:	78 2f       	mov	r23, r24
    1688:	88 27       	eor	r24, r24
    168a:	b8 5f       	subi	r27, 0xF8	; 248
    168c:	39 f0       	breq	.+14     	; 0x169c <__fixunssfsi+0x46>
    168e:	b9 3f       	cpi	r27, 0xF9	; 249
    1690:	cc f3       	brlt	.-14     	; 0x1684 <__fixunssfsi+0x2e>
    1692:	86 95       	lsr	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	b3 95       	inc	r27
    169a:	d9 f7       	brne	.-10     	; 0x1692 <__fixunssfsi+0x3c>
    169c:	3e f4       	brtc	.+14     	; 0x16ac <__fixunssfsi+0x56>
    169e:	90 95       	com	r25
    16a0:	80 95       	com	r24
    16a2:	70 95       	com	r23
    16a4:	61 95       	neg	r22
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	08 95       	ret

000016ae <__floatunsisf>:
    16ae:	e8 94       	clt
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <__floatsisf+0x12>

000016b2 <__floatsisf>:
    16b2:	97 fb       	bst	r25, 7
    16b4:	3e f4       	brtc	.+14     	; 0x16c4 <__floatsisf+0x12>
    16b6:	90 95       	com	r25
    16b8:	80 95       	com	r24
    16ba:	70 95       	com	r23
    16bc:	61 95       	neg	r22
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	99 23       	and	r25, r25
    16c6:	a9 f0       	breq	.+42     	; 0x16f2 <__floatsisf+0x40>
    16c8:	f9 2f       	mov	r31, r25
    16ca:	96 e9       	ldi	r25, 0x96	; 150
    16cc:	bb 27       	eor	r27, r27
    16ce:	93 95       	inc	r25
    16d0:	f6 95       	lsr	r31
    16d2:	87 95       	ror	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b7 95       	ror	r27
    16da:	f1 11       	cpse	r31, r1
    16dc:	f8 cf       	rjmp	.-16     	; 0x16ce <__floatsisf+0x1c>
    16de:	fa f4       	brpl	.+62     	; 0x171e <__floatsisf+0x6c>
    16e0:	bb 0f       	add	r27, r27
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <__floatsisf+0x36>
    16e4:	60 ff       	sbrs	r22, 0
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <__floatsisf+0x6c>
    16e8:	6f 5f       	subi	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	16 c0       	rjmp	.+44     	; 0x171e <__floatsisf+0x6c>
    16f2:	88 23       	and	r24, r24
    16f4:	11 f0       	breq	.+4      	; 0x16fa <__floatsisf+0x48>
    16f6:	96 e9       	ldi	r25, 0x96	; 150
    16f8:	11 c0       	rjmp	.+34     	; 0x171c <__floatsisf+0x6a>
    16fa:	77 23       	and	r23, r23
    16fc:	21 f0       	breq	.+8      	; 0x1706 <__floatsisf+0x54>
    16fe:	9e e8       	ldi	r25, 0x8E	; 142
    1700:	87 2f       	mov	r24, r23
    1702:	76 2f       	mov	r23, r22
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <__floatsisf+0x5e>
    1706:	66 23       	and	r22, r22
    1708:	71 f0       	breq	.+28     	; 0x1726 <__floatsisf+0x74>
    170a:	96 e8       	ldi	r25, 0x86	; 134
    170c:	86 2f       	mov	r24, r22
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	2a f0       	brmi	.+10     	; 0x171e <__floatsisf+0x6c>
    1714:	9a 95       	dec	r25
    1716:	66 0f       	add	r22, r22
    1718:	77 1f       	adc	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	da f7       	brpl	.-10     	; 0x1714 <__floatsisf+0x62>
    171e:	88 0f       	add	r24, r24
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret

00001728 <__fp_cmp>:
    1728:	99 0f       	add	r25, r25
    172a:	00 08       	sbc	r0, r0
    172c:	55 0f       	add	r21, r21
    172e:	aa 0b       	sbc	r26, r26
    1730:	e0 e8       	ldi	r30, 0x80	; 128
    1732:	fe ef       	ldi	r31, 0xFE	; 254
    1734:	16 16       	cp	r1, r22
    1736:	17 06       	cpc	r1, r23
    1738:	e8 07       	cpc	r30, r24
    173a:	f9 07       	cpc	r31, r25
    173c:	c0 f0       	brcs	.+48     	; 0x176e <__fp_cmp+0x46>
    173e:	12 16       	cp	r1, r18
    1740:	13 06       	cpc	r1, r19
    1742:	e4 07       	cpc	r30, r20
    1744:	f5 07       	cpc	r31, r21
    1746:	98 f0       	brcs	.+38     	; 0x176e <__fp_cmp+0x46>
    1748:	62 1b       	sub	r22, r18
    174a:	73 0b       	sbc	r23, r19
    174c:	84 0b       	sbc	r24, r20
    174e:	95 0b       	sbc	r25, r21
    1750:	39 f4       	brne	.+14     	; 0x1760 <__fp_cmp+0x38>
    1752:	0a 26       	eor	r0, r26
    1754:	61 f0       	breq	.+24     	; 0x176e <__fp_cmp+0x46>
    1756:	23 2b       	or	r18, r19
    1758:	24 2b       	or	r18, r20
    175a:	25 2b       	or	r18, r21
    175c:	21 f4       	brne	.+8      	; 0x1766 <__fp_cmp+0x3e>
    175e:	08 95       	ret
    1760:	0a 26       	eor	r0, r26
    1762:	09 f4       	brne	.+2      	; 0x1766 <__fp_cmp+0x3e>
    1764:	a1 40       	sbci	r26, 0x01	; 1
    1766:	a6 95       	lsr	r26
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	81 1d       	adc	r24, r1
    176c:	81 1d       	adc	r24, r1
    176e:	08 95       	ret

00001770 <__fp_inf>:
    1770:	97 f9       	bld	r25, 7
    1772:	9f 67       	ori	r25, 0x7F	; 127
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	08 95       	ret

0000177c <__fp_nan>:
    177c:	9f ef       	ldi	r25, 0xFF	; 255
    177e:	80 ec       	ldi	r24, 0xC0	; 192
    1780:	08 95       	ret

00001782 <__fp_pscA>:
    1782:	00 24       	eor	r0, r0
    1784:	0a 94       	dec	r0
    1786:	16 16       	cp	r1, r22
    1788:	17 06       	cpc	r1, r23
    178a:	18 06       	cpc	r1, r24
    178c:	09 06       	cpc	r0, r25
    178e:	08 95       	ret

00001790 <__fp_pscB>:
    1790:	00 24       	eor	r0, r0
    1792:	0a 94       	dec	r0
    1794:	12 16       	cp	r1, r18
    1796:	13 06       	cpc	r1, r19
    1798:	14 06       	cpc	r1, r20
    179a:	05 06       	cpc	r0, r21
    179c:	08 95       	ret

0000179e <__fp_round>:
    179e:	09 2e       	mov	r0, r25
    17a0:	03 94       	inc	r0
    17a2:	00 0c       	add	r0, r0
    17a4:	11 f4       	brne	.+4      	; 0x17aa <__fp_round+0xc>
    17a6:	88 23       	and	r24, r24
    17a8:	52 f0       	brmi	.+20     	; 0x17be <__fp_round+0x20>
    17aa:	bb 0f       	add	r27, r27
    17ac:	40 f4       	brcc	.+16     	; 0x17be <__fp_round+0x20>
    17ae:	bf 2b       	or	r27, r31
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <__fp_round+0x18>
    17b2:	60 ff       	sbrs	r22, 0
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <__fp_round+0x20>
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	08 95       	ret

000017c0 <__fp_split3>:
    17c0:	57 fd       	sbrc	r21, 7
    17c2:	90 58       	subi	r25, 0x80	; 128
    17c4:	44 0f       	add	r20, r20
    17c6:	55 1f       	adc	r21, r21
    17c8:	59 f0       	breq	.+22     	; 0x17e0 <__fp_splitA+0x10>
    17ca:	5f 3f       	cpi	r21, 0xFF	; 255
    17cc:	71 f0       	breq	.+28     	; 0x17ea <__fp_splitA+0x1a>
    17ce:	47 95       	ror	r20

000017d0 <__fp_splitA>:
    17d0:	88 0f       	add	r24, r24
    17d2:	97 fb       	bst	r25, 7
    17d4:	99 1f       	adc	r25, r25
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <__fp_splitA+0x20>
    17d8:	9f 3f       	cpi	r25, 0xFF	; 255
    17da:	79 f0       	breq	.+30     	; 0x17fa <__fp_splitA+0x2a>
    17dc:	87 95       	ror	r24
    17de:	08 95       	ret
    17e0:	12 16       	cp	r1, r18
    17e2:	13 06       	cpc	r1, r19
    17e4:	14 06       	cpc	r1, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	f2 cf       	rjmp	.-28     	; 0x17ce <__fp_split3+0xe>
    17ea:	46 95       	lsr	r20
    17ec:	f1 df       	rcall	.-30     	; 0x17d0 <__fp_splitA>
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <__fp_splitA+0x30>
    17f0:	16 16       	cp	r1, r22
    17f2:	17 06       	cpc	r1, r23
    17f4:	18 06       	cpc	r1, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	f1 cf       	rjmp	.-30     	; 0x17dc <__fp_splitA+0xc>
    17fa:	86 95       	lsr	r24
    17fc:	71 05       	cpc	r23, r1
    17fe:	61 05       	cpc	r22, r1
    1800:	08 94       	sec
    1802:	08 95       	ret

00001804 <__fp_zero>:
    1804:	e8 94       	clt

00001806 <__fp_szero>:
    1806:	bb 27       	eor	r27, r27
    1808:	66 27       	eor	r22, r22
    180a:	77 27       	eor	r23, r23
    180c:	cb 01       	movw	r24, r22
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret

00001812 <__gesf2>:
    1812:	8a df       	rcall	.-236    	; 0x1728 <__fp_cmp>
    1814:	08 f4       	brcc	.+2      	; 0x1818 <__gesf2+0x6>
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	08 95       	ret

0000181a <__mulsf3>:
    181a:	0b d0       	rcall	.+22     	; 0x1832 <__mulsf3x>
    181c:	c0 cf       	rjmp	.-128    	; 0x179e <__fp_round>
    181e:	b1 df       	rcall	.-158    	; 0x1782 <__fp_pscA>
    1820:	28 f0       	brcs	.+10     	; 0x182c <__mulsf3+0x12>
    1822:	b6 df       	rcall	.-148    	; 0x1790 <__fp_pscB>
    1824:	18 f0       	brcs	.+6      	; 0x182c <__mulsf3+0x12>
    1826:	95 23       	and	r25, r21
    1828:	09 f0       	breq	.+2      	; 0x182c <__mulsf3+0x12>
    182a:	a2 cf       	rjmp	.-188    	; 0x1770 <__fp_inf>
    182c:	a7 cf       	rjmp	.-178    	; 0x177c <__fp_nan>
    182e:	11 24       	eor	r1, r1
    1830:	ea cf       	rjmp	.-44     	; 0x1806 <__fp_szero>

00001832 <__mulsf3x>:
    1832:	c6 df       	rcall	.-116    	; 0x17c0 <__fp_split3>
    1834:	a0 f3       	brcs	.-24     	; 0x181e <__mulsf3+0x4>

00001836 <__mulsf3_pse>:
    1836:	95 9f       	mul	r25, r21
    1838:	d1 f3       	breq	.-12     	; 0x182e <__mulsf3+0x14>
    183a:	95 0f       	add	r25, r21
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	55 1f       	adc	r21, r21
    1840:	62 9f       	mul	r22, r18
    1842:	f0 01       	movw	r30, r0
    1844:	72 9f       	mul	r23, r18
    1846:	bb 27       	eor	r27, r27
    1848:	f0 0d       	add	r31, r0
    184a:	b1 1d       	adc	r27, r1
    184c:	63 9f       	mul	r22, r19
    184e:	aa 27       	eor	r26, r26
    1850:	f0 0d       	add	r31, r0
    1852:	b1 1d       	adc	r27, r1
    1854:	aa 1f       	adc	r26, r26
    1856:	64 9f       	mul	r22, r20
    1858:	66 27       	eor	r22, r22
    185a:	b0 0d       	add	r27, r0
    185c:	a1 1d       	adc	r26, r1
    185e:	66 1f       	adc	r22, r22
    1860:	82 9f       	mul	r24, r18
    1862:	22 27       	eor	r18, r18
    1864:	b0 0d       	add	r27, r0
    1866:	a1 1d       	adc	r26, r1
    1868:	62 1f       	adc	r22, r18
    186a:	73 9f       	mul	r23, r19
    186c:	b0 0d       	add	r27, r0
    186e:	a1 1d       	adc	r26, r1
    1870:	62 1f       	adc	r22, r18
    1872:	83 9f       	mul	r24, r19
    1874:	a0 0d       	add	r26, r0
    1876:	61 1d       	adc	r22, r1
    1878:	22 1f       	adc	r18, r18
    187a:	74 9f       	mul	r23, r20
    187c:	33 27       	eor	r19, r19
    187e:	a0 0d       	add	r26, r0
    1880:	61 1d       	adc	r22, r1
    1882:	23 1f       	adc	r18, r19
    1884:	84 9f       	mul	r24, r20
    1886:	60 0d       	add	r22, r0
    1888:	21 1d       	adc	r18, r1
    188a:	82 2f       	mov	r24, r18
    188c:	76 2f       	mov	r23, r22
    188e:	6a 2f       	mov	r22, r26
    1890:	11 24       	eor	r1, r1
    1892:	9f 57       	subi	r25, 0x7F	; 127
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	8a f0       	brmi	.+34     	; 0x18ba <__mulsf3_pse+0x84>
    1898:	e1 f0       	breq	.+56     	; 0x18d2 <__mulsf3_pse+0x9c>
    189a:	88 23       	and	r24, r24
    189c:	4a f0       	brmi	.+18     	; 0x18b0 <__mulsf3_pse+0x7a>
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	bb 1f       	adc	r27, r27
    18a4:	66 1f       	adc	r22, r22
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 1f       	adc	r24, r24
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	50 40       	sbci	r21, 0x00	; 0
    18ae:	a9 f7       	brne	.-22     	; 0x189a <__mulsf3_pse+0x64>
    18b0:	9e 3f       	cpi	r25, 0xFE	; 254
    18b2:	51 05       	cpc	r21, r1
    18b4:	70 f0       	brcs	.+28     	; 0x18d2 <__mulsf3_pse+0x9c>
    18b6:	5c cf       	rjmp	.-328    	; 0x1770 <__fp_inf>
    18b8:	a6 cf       	rjmp	.-180    	; 0x1806 <__fp_szero>
    18ba:	5f 3f       	cpi	r21, 0xFF	; 255
    18bc:	ec f3       	brlt	.-6      	; 0x18b8 <__mulsf3_pse+0x82>
    18be:	98 3e       	cpi	r25, 0xE8	; 232
    18c0:	dc f3       	brlt	.-10     	; 0x18b8 <__mulsf3_pse+0x82>
    18c2:	86 95       	lsr	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b7 95       	ror	r27
    18ca:	f7 95       	ror	r31
    18cc:	e7 95       	ror	r30
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	c1 f7       	brne	.-16     	; 0x18c2 <__mulsf3_pse+0x8c>
    18d2:	fe 2b       	or	r31, r30
    18d4:	88 0f       	add	r24, r24
    18d6:	91 1d       	adc	r25, r1
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret

000018e0 <__prologue_saves__>:
    18e0:	2f 92       	push	r2
    18e2:	3f 92       	push	r3
    18e4:	4f 92       	push	r4
    18e6:	5f 92       	push	r5
    18e8:	6f 92       	push	r6
    18ea:	7f 92       	push	r7
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	ca 1b       	sub	r28, r26
    190a:	db 0b       	sbc	r29, r27
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	09 94       	ijmp

00001918 <__epilogue_restores__>:
    1918:	2a 88       	ldd	r2, Y+18	; 0x12
    191a:	39 88       	ldd	r3, Y+17	; 0x11
    191c:	48 88       	ldd	r4, Y+16	; 0x10
    191e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1920:	6e 84       	ldd	r6, Y+14	; 0x0e
    1922:	7d 84       	ldd	r7, Y+13	; 0x0d
    1924:	8c 84       	ldd	r8, Y+12	; 0x0c
    1926:	9b 84       	ldd	r9, Y+11	; 0x0b
    1928:	aa 84       	ldd	r10, Y+10	; 0x0a
    192a:	b9 84       	ldd	r11, Y+9	; 0x09
    192c:	c8 84       	ldd	r12, Y+8	; 0x08
    192e:	df 80       	ldd	r13, Y+7	; 0x07
    1930:	ee 80       	ldd	r14, Y+6	; 0x06
    1932:	fd 80       	ldd	r15, Y+5	; 0x05
    1934:	0c 81       	ldd	r16, Y+4	; 0x04
    1936:	1b 81       	ldd	r17, Y+3	; 0x03
    1938:	aa 81       	ldd	r26, Y+2	; 0x02
    193a:	b9 81       	ldd	r27, Y+1	; 0x01
    193c:	ce 0f       	add	r28, r30
    193e:	d1 1d       	adc	r29, r1
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	ed 01       	movw	r28, r26
    194c:	08 95       	ret

0000194e <__ftoa_engine>:
    194e:	28 30       	cpi	r18, 0x08	; 8
    1950:	08 f0       	brcs	.+2      	; 0x1954 <__ftoa_engine+0x6>
    1952:	27 e0       	ldi	r18, 0x07	; 7
    1954:	33 27       	eor	r19, r19
    1956:	da 01       	movw	r26, r20
    1958:	99 0f       	add	r25, r25
    195a:	31 1d       	adc	r19, r1
    195c:	87 fd       	sbrc	r24, 7
    195e:	91 60       	ori	r25, 0x01	; 1
    1960:	00 96       	adiw	r24, 0x00	; 0
    1962:	61 05       	cpc	r22, r1
    1964:	71 05       	cpc	r23, r1
    1966:	39 f4       	brne	.+14     	; 0x1976 <__ftoa_engine+0x28>
    1968:	32 60       	ori	r19, 0x02	; 2
    196a:	2e 5f       	subi	r18, 0xFE	; 254
    196c:	3d 93       	st	X+, r19
    196e:	30 e3       	ldi	r19, 0x30	; 48
    1970:	2a 95       	dec	r18
    1972:	e1 f7       	brne	.-8      	; 0x196c <__ftoa_engine+0x1e>
    1974:	08 95       	ret
    1976:	9f 3f       	cpi	r25, 0xFF	; 255
    1978:	30 f0       	brcs	.+12     	; 0x1986 <__ftoa_engine+0x38>
    197a:	80 38       	cpi	r24, 0x80	; 128
    197c:	71 05       	cpc	r23, r1
    197e:	61 05       	cpc	r22, r1
    1980:	09 f0       	breq	.+2      	; 0x1984 <__ftoa_engine+0x36>
    1982:	3c 5f       	subi	r19, 0xFC	; 252
    1984:	3c 5f       	subi	r19, 0xFC	; 252
    1986:	3d 93       	st	X+, r19
    1988:	91 30       	cpi	r25, 0x01	; 1
    198a:	08 f0       	brcs	.+2      	; 0x198e <__ftoa_engine+0x40>
    198c:	80 68       	ori	r24, 0x80	; 128
    198e:	91 1d       	adc	r25, r1
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	1f 93       	push	r17
    1996:	0f 93       	push	r16
    1998:	ff 92       	push	r15
    199a:	ef 92       	push	r14
    199c:	19 2f       	mov	r17, r25
    199e:	98 7f       	andi	r25, 0xF8	; 248
    19a0:	96 95       	lsr	r25
    19a2:	e9 2f       	mov	r30, r25
    19a4:	96 95       	lsr	r25
    19a6:	96 95       	lsr	r25
    19a8:	e9 0f       	add	r30, r25
    19aa:	ff 27       	eor	r31, r31
    19ac:	ea 54       	subi	r30, 0x4A	; 74
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	99 27       	eor	r25, r25
    19b2:	33 27       	eor	r19, r19
    19b4:	ee 24       	eor	r14, r14
    19b6:	ff 24       	eor	r15, r15
    19b8:	a7 01       	movw	r20, r14
    19ba:	e7 01       	movw	r28, r14
    19bc:	05 90       	lpm	r0, Z+
    19be:	08 94       	sec
    19c0:	07 94       	ror	r0
    19c2:	28 f4       	brcc	.+10     	; 0x19ce <__ftoa_engine+0x80>
    19c4:	36 0f       	add	r19, r22
    19c6:	e7 1e       	adc	r14, r23
    19c8:	f8 1e       	adc	r15, r24
    19ca:	49 1f       	adc	r20, r25
    19cc:	51 1d       	adc	r21, r1
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	06 94       	lsr	r0
    19d8:	a1 f7       	brne	.-24     	; 0x19c2 <__ftoa_engine+0x74>
    19da:	05 90       	lpm	r0, Z+
    19dc:	07 94       	ror	r0
    19de:	28 f4       	brcc	.+10     	; 0x19ea <__ftoa_engine+0x9c>
    19e0:	e7 0e       	add	r14, r23
    19e2:	f8 1e       	adc	r15, r24
    19e4:	49 1f       	adc	r20, r25
    19e6:	56 1f       	adc	r21, r22
    19e8:	c1 1d       	adc	r28, r1
    19ea:	77 0f       	add	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	66 1f       	adc	r22, r22
    19f2:	06 94       	lsr	r0
    19f4:	a1 f7       	brne	.-24     	; 0x19de <__ftoa_engine+0x90>
    19f6:	05 90       	lpm	r0, Z+
    19f8:	07 94       	ror	r0
    19fa:	28 f4       	brcc	.+10     	; 0x1a06 <__ftoa_engine+0xb8>
    19fc:	f8 0e       	add	r15, r24
    19fe:	49 1f       	adc	r20, r25
    1a00:	56 1f       	adc	r21, r22
    1a02:	c7 1f       	adc	r28, r23
    1a04:	d1 1d       	adc	r29, r1
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	66 1f       	adc	r22, r22
    1a0c:	77 1f       	adc	r23, r23
    1a0e:	06 94       	lsr	r0
    1a10:	a1 f7       	brne	.-24     	; 0x19fa <__ftoa_engine+0xac>
    1a12:	05 90       	lpm	r0, Z+
    1a14:	07 94       	ror	r0
    1a16:	20 f4       	brcc	.+8      	; 0x1a20 <__ftoa_engine+0xd2>
    1a18:	49 0f       	add	r20, r25
    1a1a:	56 1f       	adc	r21, r22
    1a1c:	c7 1f       	adc	r28, r23
    1a1e:	d8 1f       	adc	r29, r24
    1a20:	99 0f       	add	r25, r25
    1a22:	66 1f       	adc	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	88 1f       	adc	r24, r24
    1a28:	06 94       	lsr	r0
    1a2a:	a9 f7       	brne	.-22     	; 0x1a16 <__ftoa_engine+0xc8>
    1a2c:	84 91       	lpm	r24, Z+
    1a2e:	10 95       	com	r17
    1a30:	17 70       	andi	r17, 0x07	; 7
    1a32:	41 f0       	breq	.+16     	; 0x1a44 <__ftoa_engine+0xf6>
    1a34:	d6 95       	lsr	r29
    1a36:	c7 95       	ror	r28
    1a38:	57 95       	ror	r21
    1a3a:	47 95       	ror	r20
    1a3c:	f7 94       	ror	r15
    1a3e:	e7 94       	ror	r14
    1a40:	1a 95       	dec	r17
    1a42:	c1 f7       	brne	.-16     	; 0x1a34 <__ftoa_engine+0xe6>
    1a44:	ec e5       	ldi	r30, 0x5C	; 92
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	68 94       	set
    1a4a:	15 90       	lpm	r1, Z+
    1a4c:	15 91       	lpm	r17, Z+
    1a4e:	35 91       	lpm	r19, Z+
    1a50:	65 91       	lpm	r22, Z+
    1a52:	95 91       	lpm	r25, Z+
    1a54:	05 90       	lpm	r0, Z+
    1a56:	7f e2       	ldi	r23, 0x2F	; 47
    1a58:	73 95       	inc	r23
    1a5a:	e1 18       	sub	r14, r1
    1a5c:	f1 0a       	sbc	r15, r17
    1a5e:	43 0b       	sbc	r20, r19
    1a60:	56 0b       	sbc	r21, r22
    1a62:	c9 0b       	sbc	r28, r25
    1a64:	d0 09       	sbc	r29, r0
    1a66:	c0 f7       	brcc	.-16     	; 0x1a58 <__ftoa_engine+0x10a>
    1a68:	e1 0c       	add	r14, r1
    1a6a:	f1 1e       	adc	r15, r17
    1a6c:	43 1f       	adc	r20, r19
    1a6e:	56 1f       	adc	r21, r22
    1a70:	c9 1f       	adc	r28, r25
    1a72:	d0 1d       	adc	r29, r0
    1a74:	7e f4       	brtc	.+30     	; 0x1a94 <__ftoa_engine+0x146>
    1a76:	70 33       	cpi	r23, 0x30	; 48
    1a78:	11 f4       	brne	.+4      	; 0x1a7e <__ftoa_engine+0x130>
    1a7a:	8a 95       	dec	r24
    1a7c:	e6 cf       	rjmp	.-52     	; 0x1a4a <__ftoa_engine+0xfc>
    1a7e:	e8 94       	clt
    1a80:	01 50       	subi	r16, 0x01	; 1
    1a82:	30 f0       	brcs	.+12     	; 0x1a90 <__ftoa_engine+0x142>
    1a84:	08 0f       	add	r16, r24
    1a86:	0a f4       	brpl	.+2      	; 0x1a8a <__ftoa_engine+0x13c>
    1a88:	00 27       	eor	r16, r16
    1a8a:	02 17       	cp	r16, r18
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <__ftoa_engine+0x142>
    1a8e:	20 2f       	mov	r18, r16
    1a90:	23 95       	inc	r18
    1a92:	02 2f       	mov	r16, r18
    1a94:	7a 33       	cpi	r23, 0x3A	; 58
    1a96:	28 f0       	brcs	.+10     	; 0x1aa2 <__ftoa_engine+0x154>
    1a98:	79 e3       	ldi	r23, 0x39	; 57
    1a9a:	7d 93       	st	X+, r23
    1a9c:	2a 95       	dec	r18
    1a9e:	e9 f7       	brne	.-6      	; 0x1a9a <__ftoa_engine+0x14c>
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <__ftoa_engine+0x174>
    1aa2:	7d 93       	st	X+, r23
    1aa4:	2a 95       	dec	r18
    1aa6:	89 f6       	brne	.-94     	; 0x1a4a <__ftoa_engine+0xfc>
    1aa8:	06 94       	lsr	r0
    1aaa:	97 95       	ror	r25
    1aac:	67 95       	ror	r22
    1aae:	37 95       	ror	r19
    1ab0:	17 95       	ror	r17
    1ab2:	17 94       	ror	r1
    1ab4:	e1 18       	sub	r14, r1
    1ab6:	f1 0a       	sbc	r15, r17
    1ab8:	43 0b       	sbc	r20, r19
    1aba:	56 0b       	sbc	r21, r22
    1abc:	c9 0b       	sbc	r28, r25
    1abe:	d0 09       	sbc	r29, r0
    1ac0:	98 f0       	brcs	.+38     	; 0x1ae8 <__ftoa_engine+0x19a>
    1ac2:	23 95       	inc	r18
    1ac4:	7e 91       	ld	r23, -X
    1ac6:	73 95       	inc	r23
    1ac8:	7a 33       	cpi	r23, 0x3A	; 58
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <__ftoa_engine+0x180>
    1acc:	70 e3       	ldi	r23, 0x30	; 48
    1ace:	7c 93       	st	X, r23
    1ad0:	20 13       	cpse	r18, r16
    1ad2:	b8 f7       	brcc	.-18     	; 0x1ac2 <__ftoa_engine+0x174>
    1ad4:	7e 91       	ld	r23, -X
    1ad6:	70 61       	ori	r23, 0x10	; 16
    1ad8:	7d 93       	st	X+, r23
    1ada:	30 f0       	brcs	.+12     	; 0x1ae8 <__ftoa_engine+0x19a>
    1adc:	83 95       	inc	r24
    1ade:	71 e3       	ldi	r23, 0x31	; 49
    1ae0:	7d 93       	st	X+, r23
    1ae2:	70 e3       	ldi	r23, 0x30	; 48
    1ae4:	2a 95       	dec	r18
    1ae6:	e1 f7       	brne	.-8      	; 0x1ae0 <__ftoa_engine+0x192>
    1ae8:	11 24       	eor	r1, r1
    1aea:	ef 90       	pop	r14
    1aec:	ff 90       	pop	r15
    1aee:	0f 91       	pop	r16
    1af0:	1f 91       	pop	r17
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	99 27       	eor	r25, r25
    1af8:	87 fd       	sbrc	r24, 7
    1afa:	90 95       	com	r25
    1afc:	08 95       	ret

00001afe <strnlen_P>:
    1afe:	fc 01       	movw	r30, r24
    1b00:	05 90       	lpm	r0, Z+
    1b02:	61 50       	subi	r22, 0x01	; 1
    1b04:	70 40       	sbci	r23, 0x00	; 0
    1b06:	01 10       	cpse	r0, r1
    1b08:	d8 f7       	brcc	.-10     	; 0x1b00 <strnlen_P+0x2>
    1b0a:	80 95       	com	r24
    1b0c:	90 95       	com	r25
    1b0e:	8e 0f       	add	r24, r30
    1b10:	9f 1f       	adc	r25, r31
    1b12:	08 95       	ret

00001b14 <strnlen>:
    1b14:	fc 01       	movw	r30, r24
    1b16:	61 50       	subi	r22, 0x01	; 1
    1b18:	70 40       	sbci	r23, 0x00	; 0
    1b1a:	01 90       	ld	r0, Z+
    1b1c:	01 10       	cpse	r0, r1
    1b1e:	d8 f7       	brcc	.-10     	; 0x1b16 <strnlen+0x2>
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	8e 0f       	add	r24, r30
    1b26:	9f 1f       	adc	r25, r31
    1b28:	08 95       	ret

00001b2a <ltoa>:
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	cf 93       	push	r28
    1b2e:	ff 93       	push	r31
    1b30:	ef 93       	push	r30
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	44 f1       	brlt	.+80     	; 0x1b86 <ltoa+0x5c>
    1b36:	25 32       	cpi	r18, 0x25	; 37
    1b38:	34 f5       	brge	.+76     	; 0x1b86 <ltoa+0x5c>
    1b3a:	c2 2f       	mov	r28, r18
    1b3c:	e8 94       	clt
    1b3e:	ca 30       	cpi	r28, 0x0A	; 10
    1b40:	49 f4       	brne	.+18     	; 0x1b54 <ltoa+0x2a>
    1b42:	97 fb       	bst	r25, 7
    1b44:	3e f4       	brtc	.+14     	; 0x1b54 <ltoa+0x2a>
    1b46:	90 95       	com	r25
    1b48:	80 95       	com	r24
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	2c 2f       	mov	r18, r28
    1b56:	33 27       	eor	r19, r19
    1b58:	44 27       	eor	r20, r20
    1b5a:	55 27       	eor	r21, r21
    1b5c:	ff 93       	push	r31
    1b5e:	ef 93       	push	r30
    1b60:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__udivmodsi4>
    1b64:	ef 91       	pop	r30
    1b66:	ff 91       	pop	r31
    1b68:	60 5d       	subi	r22, 0xD0	; 208
    1b6a:	6a 33       	cpi	r22, 0x3A	; 58
    1b6c:	0c f0       	brlt	.+2      	; 0x1b70 <ltoa+0x46>
    1b6e:	69 5d       	subi	r22, 0xD9	; 217
    1b70:	61 93       	st	Z+, r22
    1b72:	b9 01       	movw	r22, r18
    1b74:	ca 01       	movw	r24, r20
    1b76:	60 50       	subi	r22, 0x00	; 0
    1b78:	70 40       	sbci	r23, 0x00	; 0
    1b7a:	80 40       	sbci	r24, 0x00	; 0
    1b7c:	90 40       	sbci	r25, 0x00	; 0
    1b7e:	51 f7       	brne	.-44     	; 0x1b54 <ltoa+0x2a>
    1b80:	16 f4       	brtc	.+4      	; 0x1b86 <ltoa+0x5c>
    1b82:	cd e2       	ldi	r28, 0x2D	; 45
    1b84:	c1 93       	st	Z+, r28
    1b86:	10 82       	st	Z, r1
    1b88:	8f 91       	pop	r24
    1b8a:	9f 91       	pop	r25
    1b8c:	cf 91       	pop	r28
    1b8e:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <strrev>

00001b92 <fputc>:
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	8c 01       	movw	r16, r24
    1b9c:	eb 01       	movw	r28, r22
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 ff       	sbrs	r24, 1
    1ba2:	1b c0       	rjmp	.+54     	; 0x1bda <fputc+0x48>
    1ba4:	82 ff       	sbrs	r24, 2
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <fputc+0x30>
    1ba8:	2e 81       	ldd	r18, Y+6	; 0x06
    1baa:	3f 81       	ldd	r19, Y+7	; 0x07
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	28 17       	cp	r18, r24
    1bb2:	39 07       	cpc	r19, r25
    1bb4:	64 f4       	brge	.+24     	; 0x1bce <fputc+0x3c>
    1bb6:	e8 81       	ld	r30, Y
    1bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bba:	01 93       	st	Z+, r16
    1bbc:	f9 83       	std	Y+1, r31	; 0x01
    1bbe:	e8 83       	st	Y, r30
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <fputc+0x3c>
    1bc2:	e8 85       	ldd	r30, Y+8	; 0x08
    1bc4:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc6:	80 2f       	mov	r24, r16
    1bc8:	09 95       	icall
    1bca:	89 2b       	or	r24, r25
    1bcc:	31 f4       	brne	.+12     	; 0x1bda <fputc+0x48>
    1bce:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	9f 83       	std	Y+7, r25	; 0x07
    1bd6:	8e 83       	std	Y+6, r24	; 0x06
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <fputc+0x4c>
    1bda:	0f ef       	ldi	r16, 0xFF	; 255
    1bdc:	1f ef       	ldi	r17, 0xFF	; 255
    1bde:	c8 01       	movw	r24, r16
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <sprintf>:
    1bea:	ae e0       	ldi	r26, 0x0E	; 14
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb ef       	ldi	r30, 0xFB	; 251
    1bf0:	fd e0       	ldi	r31, 0x0D	; 13
    1bf2:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__prologue_saves__+0x1c>
    1bf6:	0d 89       	ldd	r16, Y+21	; 0x15
    1bf8:	1e 89       	ldd	r17, Y+22	; 0x16
    1bfa:	86 e0       	ldi	r24, 0x06	; 6
    1bfc:	8c 83       	std	Y+4, r24	; 0x04
    1bfe:	1a 83       	std	Y+2, r17	; 0x02
    1c00:	09 83       	std	Y+1, r16	; 0x01
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	9f e7       	ldi	r25, 0x7F	; 127
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	9e 01       	movw	r18, r28
    1c0c:	27 5e       	subi	r18, 0xE7	; 231
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	6f 89       	ldd	r22, Y+23	; 0x17
    1c16:	78 8d       	ldd	r23, Y+24	; 0x18
    1c18:	a9 01       	movw	r20, r18
    1c1a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <vfprintf>
    1c1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c20:	38 85       	ldd	r19, Y+8	; 0x08
    1c22:	02 0f       	add	r16, r18
    1c24:	13 1f       	adc	r17, r19
    1c26:	f8 01       	movw	r30, r16
    1c28:	10 82       	st	Z, r1
    1c2a:	2e 96       	adiw	r28, 0x0e	; 14
    1c2c:	e4 e0       	ldi	r30, 0x04	; 4
    1c2e:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__epilogue_restores__+0x1c>

00001c32 <__ultoa_invert>:
    1c32:	fa 01       	movw	r30, r20
    1c34:	aa 27       	eor	r26, r26
    1c36:	28 30       	cpi	r18, 0x08	; 8
    1c38:	51 f1       	breq	.+84     	; 0x1c8e <__ultoa_invert+0x5c>
    1c3a:	20 31       	cpi	r18, 0x10	; 16
    1c3c:	81 f1       	breq	.+96     	; 0x1c9e <__ultoa_invert+0x6c>
    1c3e:	e8 94       	clt
    1c40:	6f 93       	push	r22
    1c42:	6e 7f       	andi	r22, 0xFE	; 254
    1c44:	6e 5f       	subi	r22, 0xFE	; 254
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	af 4f       	sbci	r26, 0xFF	; 255
    1c4e:	b1 e0       	ldi	r27, 0x01	; 1
    1c50:	3e d0       	rcall	.+124    	; 0x1cce <__ultoa_invert+0x9c>
    1c52:	b4 e0       	ldi	r27, 0x04	; 4
    1c54:	3c d0       	rcall	.+120    	; 0x1cce <__ultoa_invert+0x9c>
    1c56:	67 0f       	add	r22, r23
    1c58:	78 1f       	adc	r23, r24
    1c5a:	89 1f       	adc	r24, r25
    1c5c:	9a 1f       	adc	r25, r26
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	68 0f       	add	r22, r24
    1c62:	79 1f       	adc	r23, r25
    1c64:	8a 1f       	adc	r24, r26
    1c66:	91 1d       	adc	r25, r1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	6a 0f       	add	r22, r26
    1c6c:	71 1d       	adc	r23, r1
    1c6e:	81 1d       	adc	r24, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	a1 1d       	adc	r26, r1
    1c74:	20 d0       	rcall	.+64     	; 0x1cb6 <__ultoa_invert+0x84>
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <__ultoa_invert+0x48>
    1c78:	68 94       	set
    1c7a:	3f 91       	pop	r19
    1c7c:	2a e0       	ldi	r18, 0x0A	; 10
    1c7e:	26 9f       	mul	r18, r22
    1c80:	11 24       	eor	r1, r1
    1c82:	30 19       	sub	r19, r0
    1c84:	30 5d       	subi	r19, 0xD0	; 208
    1c86:	31 93       	st	Z+, r19
    1c88:	de f6       	brtc	.-74     	; 0x1c40 <__ultoa_invert+0xe>
    1c8a:	cf 01       	movw	r24, r30
    1c8c:	08 95       	ret
    1c8e:	46 2f       	mov	r20, r22
    1c90:	47 70       	andi	r20, 0x07	; 7
    1c92:	40 5d       	subi	r20, 0xD0	; 208
    1c94:	41 93       	st	Z+, r20
    1c96:	b3 e0       	ldi	r27, 0x03	; 3
    1c98:	0f d0       	rcall	.+30     	; 0x1cb8 <__ultoa_invert+0x86>
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__ultoa_invert+0x5c>
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <__ultoa_invert+0x58>
    1c9e:	46 2f       	mov	r20, r22
    1ca0:	4f 70       	andi	r20, 0x0F	; 15
    1ca2:	40 5d       	subi	r20, 0xD0	; 208
    1ca4:	4a 33       	cpi	r20, 0x3A	; 58
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <__ultoa_invert+0x7c>
    1ca8:	49 5d       	subi	r20, 0xD9	; 217
    1caa:	31 fd       	sbrc	r19, 1
    1cac:	40 52       	subi	r20, 0x20	; 32
    1cae:	41 93       	st	Z+, r20
    1cb0:	02 d0       	rcall	.+4      	; 0x1cb6 <__ultoa_invert+0x84>
    1cb2:	a9 f7       	brne	.-22     	; 0x1c9e <__ultoa_invert+0x6c>
    1cb4:	ea cf       	rjmp	.-44     	; 0x1c8a <__ultoa_invert+0x58>
    1cb6:	b4 e0       	ldi	r27, 0x04	; 4
    1cb8:	a6 95       	lsr	r26
    1cba:	97 95       	ror	r25
    1cbc:	87 95       	ror	r24
    1cbe:	77 95       	ror	r23
    1cc0:	67 95       	ror	r22
    1cc2:	ba 95       	dec	r27
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <__ultoa_invert+0x86>
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	61 05       	cpc	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	08 95       	ret
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	0a 2e       	mov	r0, r26
    1cd4:	06 94       	lsr	r0
    1cd6:	57 95       	ror	r21
    1cd8:	47 95       	ror	r20
    1cda:	37 95       	ror	r19
    1cdc:	27 95       	ror	r18
    1cde:	ba 95       	dec	r27
    1ce0:	c9 f7       	brne	.-14     	; 0x1cd4 <__ultoa_invert+0xa2>
    1ce2:	62 0f       	add	r22, r18
    1ce4:	73 1f       	adc	r23, r19
    1ce6:	84 1f       	adc	r24, r20
    1ce8:	95 1f       	adc	r25, r21
    1cea:	a0 1d       	adc	r26, r0
    1cec:	08 95       	ret

00001cee <strrev>:
    1cee:	dc 01       	movw	r26, r24
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	67 2f       	mov	r22, r23
    1cf4:	71 91       	ld	r23, Z+
    1cf6:	77 23       	and	r23, r23
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <strrev+0x4>
    1cfa:	32 97       	sbiw	r30, 0x02	; 2
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <strrev+0x18>
    1cfe:	7c 91       	ld	r23, X
    1d00:	6d 93       	st	X+, r22
    1d02:	70 83       	st	Z, r23
    1d04:	62 91       	ld	r22, -Z
    1d06:	ae 17       	cp	r26, r30
    1d08:	bf 07       	cpc	r27, r31
    1d0a:	c8 f3       	brcs	.-14     	; 0x1cfe <strrev+0x10>
    1d0c:	08 95       	ret

00001d0e <__udivmodsi4>:
    1d0e:	a1 e2       	ldi	r26, 0x21	; 33
    1d10:	1a 2e       	mov	r1, r26
    1d12:	aa 1b       	sub	r26, r26
    1d14:	bb 1b       	sub	r27, r27
    1d16:	fd 01       	movw	r30, r26
    1d18:	0d c0       	rjmp	.+26     	; 0x1d34 <__udivmodsi4_ep>

00001d1a <__udivmodsi4_loop>:
    1d1a:	aa 1f       	adc	r26, r26
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	ee 1f       	adc	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	a2 17       	cp	r26, r18
    1d24:	b3 07       	cpc	r27, r19
    1d26:	e4 07       	cpc	r30, r20
    1d28:	f5 07       	cpc	r31, r21
    1d2a:	20 f0       	brcs	.+8      	; 0x1d34 <__udivmodsi4_ep>
    1d2c:	a2 1b       	sub	r26, r18
    1d2e:	b3 0b       	sbc	r27, r19
    1d30:	e4 0b       	sbc	r30, r20
    1d32:	f5 0b       	sbc	r31, r21

00001d34 <__udivmodsi4_ep>:
    1d34:	66 1f       	adc	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	1a 94       	dec	r1
    1d3e:	69 f7       	brne	.-38     	; 0x1d1a <__udivmodsi4_loop>
    1d40:	60 95       	com	r22
    1d42:	70 95       	com	r23
    1d44:	80 95       	com	r24
    1d46:	90 95       	com	r25
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	bd 01       	movw	r22, r26
    1d4e:	cf 01       	movw	r24, r30
    1d50:	08 95       	ret

00001d52 <_exit>:
    1d52:	f8 94       	cli

00001d54 <__stop_program>:
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <__stop_program>
